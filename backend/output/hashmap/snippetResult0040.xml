<?xml version="1.0" encoding="UTF-8"?>
<result>
<description>
<docid>537</docid>
<orderid>7</orderid>
<type>CODE</type>
<url>http://java.sun.com/docs/books/tutorial/collections/implementations/wrapper.html</url>
</description>
<CODE orderid="5" >
Collection&lt;Type&gt; c =
    Collections.synchronizedCollection(myCollection);
synchronized(c) {
    for (Type e : c)
        foo(e);
}
</CODE>
<TEXT orderid="6" >
If an explicit iterator is used, the iterator method must be called
from within the synchronized block. Failure to follow
this advice may result in nondeterministic behavior.
The idiom for iterating over a Collection view of a synchronized
Map is similar. It is imperative that the user synchronize
on the synchronized Map when iterating over any of its
Collection views rather than synchronizing on the
Collection view itself, as shown in the following example.
</TEXT>
<CODE orderid="7" >
Map&lt;KeyType, ValType&gt; m =
    Collections.synchronizedMap(new HashMap&lt;KeyType, ValType&gt;());
    ...
Set&lt;KeyType&gt; s = m.keySet();
    ...
synchronized(m) {  // Synchronizing on m, not s!
    while (KeyType k : s)
        foo(k);
}
</CODE>
<TEXT orderid="8" >
One minor downside of using wrapper implementations is that you
do not have the ability to execute any noninterface
operations of a wrapped implementation. So, for instance,
in the preceding List example, you cannot call
ArrayList&apos;s

ensureCapacity operation on the wrapped ArrayList.



Unmodifiable Wrappers



Unlike synchronization wrappers, which add functionality to the wrapped
collection, the unmodifiable wrappers take functionality away.
In particular, they take away the ability to modify the collection
by intercepting all the operations that would modify the collection
and throwing an UnsupportedOperationException.
Unmodifiable wrappers have two main uses, as follows:


To make a collection immutable once it has been built. In this case,
it&apos;s good practice not to maintain a reference to the backing collection.
This absolutely guarantees immutability.


To allow certain clients read-only access to your data structures.
You keep a reference to the backing collection but hand out a reference
to the wrapper. In this way, clients can look but not modify,
while you maintain full access.



Like synchronization wrappers, each of the six core Collection
interfaces has one static factory method.
</TEXT>
<CODE orderid="9" >
public static &lt;T&gt; Collection&lt;T&gt;
    unmodifiableCollection(Collection&lt;? extends T&gt; c);
public static &lt;T&gt; Set&lt;T&gt;
    unmodifiableSet(Set&lt;? extends T&gt; s);
public static &lt;T&gt; List&lt;T&gt;
    unmodifiableList(List&lt;? extends T&gt; list);
public static &lt;K,V&gt; Map&lt;K, V&gt;
    unmodifiableMap(Map&lt;? extends K, ? extends V&gt; m);
public static &lt;T&gt; SortedSet&lt;T&gt;
    unmodifiableSortedSet(SortedSet&lt;? extends T&gt; s);
public static &lt;K,V&gt; SortedMap&lt;K, V&gt;
    unmodifiableSortedMap(SortedMap&lt;K, ? extends V&gt; m);
</CODE>
</result>

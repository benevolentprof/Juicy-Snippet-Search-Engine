<?xml version="1.0" encoding="UTF-8"?>
<result>
<description>
<docid>76911</docid>
<orderid>8</orderid>
<type>TEXT</type>
<url>http://en.wikibooks.org/wiki/Java_Programming/Packages</url>
</description>
<TEXT orderid="6" >
the error will be at the import instead of within your code.
Furthermore, if you
</TEXT>
<CODE orderid="7" >
import javax.swing.*; and import java.util.*;
</CODE>
<TEXT orderid="8" >
, and javax.swing.Queue is later added in a future version of Java, your code that uses Queue (java.util) will fail to compile. This particular example is fairly unlikely, but if you are working with non-Sun libraries, it may be more likely to happen.
[edit] Importing packages from .jar files
If you are importing library packages or classes that reside in a .jar file, you must ensure that the file is in the current classpath (both at compile- and execution-time). Apart from this requirement, importing these packages and classes is the same as if they were in their full, expanded, directory structure.


Example:

To compile and run a class from a project&apos;s top directory (that contains the two directories /source and /libraries) you could use the following command:

javac -classpath libraries/lib.jar source/MainClass.java

And then to run it, similarly:

java -classpath libraries/lib.jar source/MainClass

(The above is simplified, and demands that MainClass be in the default package, or a package called &apos;source&apos;, which isn&apos;t very desirable.)

[edit] Class Loading / Name Space

A fully qualified class name&#160;
consist of the package name plus the class name.
For example, the fully qualified class name of HashMap is java.util.HashMap.
Sometime is can happen that two class has the same name, but it can not have on the same package, otherwise it would be the same class.
It can be said that the two class with the same name is in different name space. In the above example, the HashMap class is in the java.util name space.


Let be two Customer class with different name space (in different package).

com.bluecompany.Customer
com.redcompany.Customer




When we need to use both class in the same program file, we can use the import keyword only for one of the class. For the other we need to use the fully qualified name.


The runtime identity of a class in Java 2&#160;
is defined by the fully qualified class name and its defining class loader. This means that the same class, loaded by two different class loaders, is seen by the Virtual Machine as two completely different types.







Retrieved from &quot;http://en.wikibooks.org/wiki/Java_Programming/Packages&quot;
			Category: Java Programming			
						
		
	
		
		
	
		Views
		
			
	
				 Module
				 Discussion
				 Edit this page
				 History			
		
	
	
		Personal tools
		
			
				Try Beta
				Log in / create account
			
		
	
	
		
	
	
		Navigation
		
			
				Main Page
				Help
				Browse
				Cookbook
				Wikijunior
				Featured books
				Recent changes
				Donations
			
		
	
	
		Search
		
			
				
				
				&#160;
				
			
		
	
	
		community
		
			
				Reading room
				Community portal
				Bulletin Board
				Help out!
				Policies and guidelines
				Contact us
			
		
	
	
		Print/export
		
Create a bookDownload as PDFPrintable version		
	
	
		Toolbox
		
			
				What links here
				Related changes
Upload file
Special pages
				Permanent link			
		
	
		
			
			
				
				
			
					 This page was last modified on 14 September 2009, at 13:36.
					Text is available under the Creative Commons Attribution/Share-Alike License;
additional terms may apply.
See Terms of Use for details.
					Privacy policy
					About Wikibooks
					Disclaimers
</TEXT>
</result>

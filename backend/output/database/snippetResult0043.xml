<?xml version="1.0" encoding="UTF-8"?>
<result>
<description>
<docid>7241</docid>
<orderid>0</orderid>
<type>TEXT</type>
<url>http://www.developer.com/java/ent/article.php/10933_3611151_3/Building-Database-Applications-with-Remote-Support-in-Mind.htm</url>
</description>
<TEXT orderid="0" >
Developer.com
					Internet.com
				
				
			
		
		
		



		
	
	
	
		
			
				Developer 
				Microsoft &amp; .NET 
				Architecture &amp;amp Design 
				Database 
				Open Source
				Other
			
		
		
			
				Web Services
				Security
				Mobile
				Project Management
			
		
		
			RSS 
		
		
	
	
	









	
    

	
		
			
			
				March 07, 2010
				
				
					Hot Topics:
					
						prev
						
							
							
								
C#
.NET
 open source
C++
Java

								
							
							
						
						next
					
					
				
					Developer.com
					Java
					Enterprise Java
					
				
				
					Read More in Enterprise Java &#187;
				
						
			
			
			
				
				
					









					
				
				
				
					
					
				
			
			
			
			
			
			Building Database Applications with Remote Support in Mind
			
			
				
				
					June 5, 2006
					By 
Paul Horan

Bio &#187;
					Send Email &#187;
					More Articles  &#187;
				

Identification and Diagnosis of Problems

Problem Diagnosis in the On-Site Database

Many times, the support call comes in, and the only information is &quot;the system is slow&quot;... It&apos;s up to you to diagnose exactly what and where the problem is. This section presents some quick tips and non-invasive queries that can be used against a production database that provide excellent visibility into the inner workings of the database engine, helping pinpoint common causes associated with degrading performance.

Setting the &quot;Remember_Last_Statement&quot; engine property

The .zl engine switch enables this feature, which &quot;remembers&quot; the last statement executed by any active connection. Turn this feature on, and leave it on. It costs very little in terms of execution overhead, and lets you see the exact SQL statements that each connection is using. This option can also be enabled and disabled dynamically, with the following command:

call sa_server_option( &apos;remember_last_statement&apos;, &apos;ON&apos; );

Using &quot;Request_Level_Logging&quot;

Request_Level_Logging is a feature of SQL Anywhere that provides a comprehensive trace of all requests that the database engine processes. This can be a valuable debugging technique when trying to determine exactly which query is performing poorly.

Note: use of this feature can add significant overhead to the database engine, and should be used judiciously. If the output is redirected to a file, the file can grow rather rapidly.


	
		Post a comment
		Email Article
		Print Article
		
			 Share Articles
			
				
					
						 Digg
						 del.icio.us
						 Slashdot
						 DZone
						 Reddit
						 StumbleUpon
						 Facebook
						 FriendFeed
						 Furl

						 Newsvine
						 Google
						 LinkedIn
						 MySpace
						 Technorati
						 Twitter
						 Windows Live
						 YahooBuzz

					
				
			
		
	

		This feature is enabled with the following commands:
</TEXT>
<CODE orderid="1" >
call sa_server_option( &apos;request_level_logging&apos;, &apos;SQL&apos; );
call sa_server_option( &apos;request_level_log_file&apos;, &quot;&lt;output file&gt;&apos; );
</CODE>
<TEXT orderid="2" >
After the desired results are captured to the output file, turn request_level_logging off with:


call sa_server_option( &apos;request_level_logging&apos;, &apos;none&apos; );
call sa_server_option( &apos;request_level_log_file&apos;, &apos;&apos; );


Finally, the output file that is generated by request_level_logging can be analyzed with two system stored procedures:
</TEXT>
</result>

<?xml version="1.0" encoding="UTF-8"?>
<result>
<description>
<docid>4425</docid>
<orderid>3</orderid>
<type>CODE</type>
<url>http://www.developer.com/java/ent/article.php/3657951/Java-Language-Integrity--Security-Serializing-Classes.htm</url>
</description>
<CODE orderid="1" >
import java.io.*;
import java.util.*;

public class Employee implements Serializable {

   private int employeeNumber;

   Employee(int num) {
      employeeNumber = num;
   }

   public int getEmployeeNumber() {
      return employeeNumber ;
   }

   public void setEmployeeNumber(int num) {
      employeeNumber = num;
   }

}
</CODE>
<TEXT orderid="2" >
Likewise, you can adjust the code in the client and server to correspond with the lighter version of the Employee class.

The complete code for the Client class is shown in Listing 2.

Listing 2: The Client Class
</TEXT>
<CODE orderid="3" >
import java.io.*;
import java.net.*;

public class Client {

   public static void main(String[] arg) {
      try {
         Employee joe = new Employee(150);

         System.out.println(&quot;original employeeNumber= &quot; +
            joe.getEmployeeNumber());


         Socket socketConnection = new Socket(&quot;127.0.0.1&quot;, 11111);


         ObjectOutputStream clientOutputStream = new
            ObjectOutputStream(socketConnection.getOutputStream());
         ObjectInputStream clientInputStream = new
            ObjectInputStream(socketConnection.getInputStream());

         clientOutputStream.writeObject(joe);

         joe= (Employee)clientInputStream.readObject();

         System.out.println(&quot;updated employeeNumber= &quot; +
            joe.getEmployeeNumber());

         clientOutputStream.close();
         clientInputStream.close();

      } catch (Exception e) {System.out.println(e); }
   }
}
</CODE>
<TEXT orderid="4" >
The complete code for the Server class is shown in Listing 3.

Listing 3: The Server Class
</TEXT>
<CODE orderid="5" >
import java.io.*;
import java.net.*;

public class Server {

   public static void main(String[] arg) {

      Employee employee = null;

      try {

         ServerSocket socketConnection = new ServerSocket(11111);

         System.out.println(&quot;Server Waiting&quot;);

         Socket pipe = socketConnection.accept();

         ObjectInputStream serverInputStream = new
            ObjectInputStream(pipe.getInputStream());

         ObjectOutputStream serverOutputStream = new
            ObjectOutputStream(pipe.getOutputStream());

         employee = (Employee)serverInputStream.readObject();

         employee.setEmployeeNumber(256);

         serverOutputStream.writeObject(employee);

         serverInputStream.close();
         serverOutputStream.close();


      }  catch(Exception e) {System.out.println(e);
      }
   }

}
</CODE>
</result>

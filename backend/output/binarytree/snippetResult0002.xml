<?xml version="1.0" encoding="UTF-8"?>
<result>
<description>
<docid>10127</docid>
<orderid>0</orderid>
<type>TEXT</type>
<url>http://www.javacoffeebreak.com/books/extracts/javanotesv3/c11/ex-11-5-answer.html</url>
</description>
<TEXT orderid="0" >
New to
Java? We&apos;ll help you get started with our revised
beginner&apos;s tutorial,
or our free
online textbook.

  
  
	 
    
      
      











  






      
      
      
         


        

        Get the latest Java books


      
    
    
    
      
        
          h t t p : / /w w w . j a v a c o f f e e b r e a k . c
          o m /
          
            
              
                
            
          
        
      
    
  
  



Solution for

    Programming Exercise 11.5



THIS PAGE DISCUSSES ONE POSSIBLE SOLUTION to
the following exercise from this on-line
Java textbook.

Exercise 11.5:
In Section 11.4, I say that &quot;if the [binary sort] 
tree is created randomly, there is a high probability that the tree is approximately 
balanced.&quot;  For this exercise, you will do an experiment to test whether that is true.


The depth of a node in a binary tree
is the length of the path from the root of the tree to that node.
That is, the root has depth 0, its children have depth 1, its
grandchildren have depth 2, and so on.  In a balanced tree, all
the leaves in the tree are about the same depth.  For example,
in a perfectly balanced tree with 1023 nodes, all the leaves are at depth 9.
In an approximately balanced tree with 1023 nodes, the average
depth of all the leaves should be not too much bigger than 9.

On the other hand, even if the tree is approximately balanced,
there might be a few leaves that have much larger depth than
the average, so we might also want to look at the maximum depth
among all the leaves in a tree.

For this exercise, you should create a random binary sort tree with
1023 nodes.  The items in the tree can be real numbers, and you can
create the tree by generating 1023 random real numbers and inserting them
into the tree, using the usual insert() method for binary
sort trees.  Once you have the tree, you should compute and output
the average depth of all the leaves in the tree and the maximum
depth of all the leaves.  To do this, you will need three 
recursive subroutines:  one to count the leaves, one to find the
sum of the depths of all the leaves, and one to find the maximum
depth.  The latter two subroutines should have an int-valued
parameter, depth, that tells how deep in the tree you&apos;ve gone.
When you call the routine recursively, the parameter increases by 1.
  

Discussion


To create the tree, I copied the TreeNode class and the
insertTree() subroutine from Section 11.4,
and I changed the type of the items in the tree from String
to double.  The main program uses a for loop 
to add 1023 random real numbers to the tree:
</TEXT>
<CODE orderid="1" >
for (int i = 0; i &lt; 1023; i++)
             treeInsert(Math.random());
</CODE>
<TEXT orderid="2" >
After that, it&apos;s just a matter of writing the routines described
in the exercise and calling them to get the desired statistics.

A routine for counting the leaves in the tree is similar to the
countNodes() routine from Section 11.4.
That routine, however, counts every node in the tree and now we only
want to count the leaves.  A leaf is defined to be a node
in which both the left and right pointers
are null.  In the recursion, one of the base cases
is when we come to a tree that consists of nothing but a
leaf.  In that case, the number of leaves is 1.  If the
node is not a leaf, then we have to count the number of leaves
in each of its subtrees and add the results:
</TEXT>
</result>

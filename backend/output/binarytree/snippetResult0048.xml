<?xml version="1.0" encoding="UTF-8"?>
<result>
<description>
<docid>14370</docid>
<orderid>0</orderid>
<type>TEXT</type>
<url>http://www.java-tips.org/java-se-tips/java.lang/priority-queue-binary-heap-implementation-in-2.html</url>
</description>
<TEXT orderid="0" >
&#160;
            
	      





              Home    Java SE Tips               

              


            &#160;
          


        
      
  





  
    &#160;
    
    
      
        
          
              
                		
				
			
							
		
		
				
					
				
					Main Menu				
			
					
			
				

Home
Java Tutorials
Book Reviews
Java SE Tips
Java ME Tips
Java EE Tips
Other API Tips
Java Applications
Java Libraries
Java Games
Sitemap
			
		
		
				
					
				
					Java Network				
			
					
			
				






 Java Forums












			
		
		
				
				
			
				
 



 
 










 


			
		
		
				
					
				
					Most Visited Tips				
			
					
			
				

Java SE Tips
Java ME Tips
Java EE Tips
Other API Tips
Java Applications
Java Libraries
Java Games
Book Reviews
			
		
		
				
					
				
					Top Rated Tips				
			
					
			
				

Java SE Tips
Java ME Tips
Java EE Tips
Other API Tips
Java Applications
Java Libraries
Java Games
Book Reviews
			
		
		
				
				
			
				











			
		
		
				
					
				
					Statistics				
			
					
			
				Registered Users: 770Java SE Tips: 614Java ME Tips: 201Java EE Tips: 184Other API Tips: 779Java Applications: 298Java Libraries: 209Java Games: 16Book Reviews: 			
		
		
		                
              
              
                &#160;
              
            
        
        
          &#160;
        
      
      

      &#160;
        
								
			
								
					Priority Queue - Binary Heap - Implementation in Java									
							
				
					
			
						
			
			User Rating:&#160;/&#160;78


PoorBest&#160;
		
				
			
				A priority queue is an abstract data type (ADT) supporting the following three operations:


add an element to the queue with an associated priority
remove the element from the queue that has the highest priority, and return it
(optionally) peek at the element with highest priority without removing it


The simplest way to implement a priority queue data type is to keep an associative array mapping each priority to a list of elements with that priority. If association lists or hash tables are used to implement the associative array, adding an element takes constant time but removing or peeking at the element of highest priority takes linear (O(n)) time, because we must search all keys for the largest one. If a self-balancing binary search tree is used, all three operations take O(log n) time; this is a popular solution in environments that already provide balanced trees but nothing more sophisticated. The van Emde Boas tree, another associative array data structure, can perform all three operations in O(log log n) time, but at a space cost for small queues of about O(2^(m/2)), where m is the number of bits in the priority value, which may be prohibitive.

There are a number of specialized heap data structures that either supply additional operations or outperform the above approaches. The binary heap uses O(log n) time for both operations, but allows peeking at the element of highest priority without removing it in constant time. Binomial heaps add several more operations, but require O(log n) time for peeking. Fibonacci heaps can insert elements, peek at the maximum priority element, and decrease an element&apos;s priority in amortized constant time (deletions are still O(log n)).

The following code shows how to implement a priority queue in Java:
</TEXT>
<CODE orderid="1" >
//&#160;BinaryHeap&#160;class

//

//&#160;CONSTRUCTION:&#160;empty&#160;or&#160;with&#160;initial&#160;array.

//

//&#160;******************PUBLIC&#160;OPERATIONS*********************

//&#160;void&#160;insert(&#160;x&#160;)&#160;&#160;&#160;&#160;&#160;&#160;&#160;--&gt;&#160;Insert&#160;x

//&#160;Comparable&#160;deleteMin(&#160;)--&gt;&#160;Return&#160;and&#160;remove&#160;smallest&#160;item

//&#160;Comparable&#160;findMin(&#160;)&#160;&#160;--&gt;&#160;Return&#160;smallest&#160;item

//&#160;boolean&#160;isEmpty(&#160;)&#160;&#160;&#160;&#160;&#160;--&gt;&#160;Return&#160;true&#160;if&#160;empty;&#160;else&#160;false

//&#160;void&#160;makeEmpty(&#160;)&#160;&#160;&#160;&#160;&#160;&#160;--&gt;&#160;Remove&#160;all&#160;items

//&#160;******************ERRORS********************************

//&#160;Throws&#160;UnderflowException&#160;for&#160;findMin&#160;and&#160;deleteMin&#160;when&#160;empty



/**

&#160;*&#160;Implements&#160;a&#160;binary&#160;heap.

&#160;*&#160;Note&#160;that&#160;all&#160;&quot;matching&quot;&#160;is&#160;based&#160;on&#160;the&#160;compareTo&#160;method.

&#160;*&#160;@author&#160;Mark&#160;Allen&#160;Weiss

&#160;*/

public&#160;class&#160;BinaryHeap&#160;implements&#160;PriorityQueue&#160;{

&#160;&#160;&#160;&#160;/**

&#160;&#160;&#160;&#160;&#160;*&#160;Construct&#160;the&#160;binary&#160;heap.

&#160;&#160;&#160;&#160;&#160;*/

&#160;&#160;&#160;&#160;public&#160;BinaryHeap(&#160;)&#160;{

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;currentSize&#160;=&#160;0;

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;array&#160;=&#160;new&#160;Comparable[&#160;DEFAULT_CAPACITY&#160;+&#160;1&#160;];

&#160;&#160;&#160;&#160;}

&#160;&#160;&#160;&#160;

&#160;&#160;&#160;&#160;/**

&#160;&#160;&#160;&#160;&#160;*&#160;Construct&#160;the&#160;binary&#160;heap&#160;from&#160;an&#160;array.

&#160;&#160;&#160;&#160;&#160;*&#160;@param&#160;items&#160;the&#160;inital&#160;items&#160;in&#160;the&#160;binary&#160;heap.

&#160;&#160;&#160;&#160;&#160;*/

&#160;&#160;&#160;&#160;public&#160;BinaryHeap(&#160;Comparable&#160;[&#160;]&#160;items&#160;)&#160;{

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;currentSize&#160;=&#160;items.length;

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;array&#160;=&#160;new&#160;Comparable[&#160;items.length&#160;+&#160;1&#160;];

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for(&#160;int&#160;i&#160;=&#160;0;&#160;i&#160;&lt;&#160;items.length;&#160;i++&#160;)

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;array[&#160;i&#160;+&#160;1&#160;]&#160;=&#160;items[&#160;i&#160;];

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;buildHeap(&#160;);

&#160;&#160;&#160;&#160;}

&#160;&#160;&#160;&#160;

&#160;&#160;&#160;&#160;/**

&#160;&#160;&#160;&#160;&#160;*&#160;Insert&#160;into&#160;the&#160;priority&#160;queue.

&#160;&#160;&#160;&#160;&#160;*&#160;Duplicates&#160;are&#160;allowed.

&#160;&#160;&#160;&#160;&#160;*&#160;@param&#160;x&#160;the&#160;item&#160;to&#160;insert.

&#160;&#160;&#160;&#160;&#160;*&#160;@return&#160;null,&#160;signifying&#160;that&#160;decreaseKey&#160;cannot&#160;be&#160;used.

&#160;&#160;&#160;&#160;&#160;*/

&#160;&#160;&#160;&#160;public&#160;PriorityQueue.Position&#160;insert(&#160;Comparable&#160;x&#160;)&#160;{

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if(&#160;currentSize&#160;+&#160;1&#160;==&#160;array.length&#160;)

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;doubleArray(&#160;);

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//&#160;Percolate&#160;up

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int&#160;hole&#160;=&#160;++currentSize;

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;array[&#160;0&#160;]&#160;=&#160;x;

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for(&#160;;&#160;x.compareTo(&#160;array[&#160;hole&#160;/&#160;2&#160;]&#160;)&#160;&lt;&#160;0;&#160;hole&#160;/=&#160;2&#160;)

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;array[&#160;hole&#160;]&#160;=&#160;array[&#160;hole&#160;/&#160;2&#160;];

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;array[&#160;hole&#160;]&#160;=&#160;x;

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return&#160;null;

&#160;&#160;&#160;&#160;}

&#160;&#160;&#160;&#160;

&#160;&#160;&#160;&#160;/**

&#160;&#160;&#160;&#160;&#160;*&#160;@throws&#160;UnsupportedOperationException&#160;because&#160;no&#160;Positions&#160;are&#160;returned

&#160;&#160;&#160;&#160;&#160;*&#160;by&#160;the&#160;insert&#160;method&#160;for&#160;BinaryHeap.

&#160;&#160;&#160;&#160;&#160;*/

&#160;&#160;&#160;&#160;public&#160;void&#160;decreaseKey(&#160;PriorityQueue.Position&#160;p,&#160;Comparable&#160;newVal&#160;)&#160;{

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;throw&#160;new&#160;UnsupportedOperationException(&#160;&quot;Cannot&#160;use&#160;decreaseKey&#160;for&#160;binary&#160;heap&quot;&#160;);

&#160;&#160;&#160;&#160;}

&#160;&#160;&#160;&#160;

&#160;&#160;&#160;&#160;/**

&#160;&#160;&#160;&#160;&#160;*&#160;Find&#160;the&#160;smallest&#160;item&#160;in&#160;the&#160;priority&#160;queue.

&#160;&#160;&#160;&#160;&#160;*&#160;@return&#160;the&#160;smallest&#160;item.

&#160;&#160;&#160;&#160;&#160;*&#160;@throws&#160;UnderflowException&#160;if&#160;empty.

&#160;&#160;&#160;&#160;&#160;*/

&#160;&#160;&#160;&#160;public&#160;Comparable&#160;findMin(&#160;)&#160;{

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if(&#160;isEmpty(&#160;)&#160;)

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;throw&#160;new&#160;UnderflowException(&#160;&quot;Empty&#160;binary&#160;heap&quot;&#160;);

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return&#160;array[&#160;1&#160;];

&#160;&#160;&#160;&#160;}

&#160;&#160;&#160;&#160;

&#160;&#160;&#160;&#160;/**

&#160;&#160;&#160;&#160;&#160;*&#160;Remove&#160;the&#160;smallest&#160;item&#160;from&#160;the&#160;priority&#160;queue.

&#160;&#160;&#160;&#160;&#160;*&#160;@return&#160;the&#160;smallest&#160;item.

&#160;&#160;&#160;&#160;&#160;*&#160;@throws&#160;UnderflowException&#160;if&#160;empty.

&#160;&#160;&#160;&#160;&#160;*/

&#160;&#160;&#160;&#160;public&#160;Comparable&#160;deleteMin(&#160;)&#160;{

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Comparable&#160;minItem&#160;=&#160;findMin(&#160;);

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;array[&#160;1&#160;]&#160;=&#160;array[&#160;currentSize--&#160;];

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;percolateDown(&#160;1&#160;);

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return&#160;minItem;

&#160;&#160;&#160;&#160;}

&#160;&#160;&#160;&#160;

&#160;&#160;&#160;&#160;/**

&#160;&#160;&#160;&#160;&#160;*&#160;Establish&#160;heap&#160;order&#160;property&#160;from&#160;an&#160;arbitrary

&#160;&#160;&#160;&#160;&#160;*&#160;arrangement&#160;of&#160;items.&#160;Runs&#160;in&#160;linear&#160;time.

&#160;&#160;&#160;&#160;&#160;*/

&#160;&#160;&#160;&#160;private&#160;void&#160;buildHeap(&#160;)&#160;{

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for(&#160;int&#160;i&#160;=&#160;currentSize&#160;/&#160;2;&#160;i&#160;&gt;&#160;0;&#160;i--&#160;)

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;percolateDown(&#160;i&#160;);

&#160;&#160;&#160;&#160;}

&#160;&#160;&#160;&#160;

&#160;&#160;&#160;&#160;/**

&#160;&#160;&#160;&#160;&#160;*&#160;Test&#160;if&#160;the&#160;priority&#160;queue&#160;is&#160;logically&#160;empty.

&#160;&#160;&#160;&#160;&#160;*&#160;@return&#160;true&#160;if&#160;empty,&#160;false&#160;otherwise.

&#160;&#160;&#160;&#160;&#160;*/

&#160;&#160;&#160;&#160;public&#160;boolean&#160;isEmpty(&#160;)&#160;{

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return&#160;currentSize&#160;==&#160;0;

&#160;&#160;&#160;&#160;}

&#160;&#160;&#160;&#160;

&#160;&#160;&#160;&#160;/**

&#160;&#160;&#160;&#160;&#160;*&#160;Returns&#160;size.

&#160;&#160;&#160;&#160;&#160;*&#160;@return&#160;current&#160;size.

&#160;&#160;&#160;&#160;&#160;*/

&#160;&#160;&#160;&#160;public&#160;int&#160;size(&#160;)&#160;{

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return&#160;currentSize;

&#160;&#160;&#160;&#160;}

&#160;&#160;&#160;&#160;

&#160;&#160;&#160;&#160;/**

&#160;&#160;&#160;&#160;&#160;*&#160;Make&#160;the&#160;priority&#160;queue&#160;logically&#160;empty.

&#160;&#160;&#160;&#160;&#160;*/

&#160;&#160;&#160;&#160;public&#160;void&#160;makeEmpty(&#160;)&#160;{

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;currentSize&#160;=&#160;0;

&#160;&#160;&#160;&#160;}

&#160;&#160;&#160;&#160;

&#160;&#160;&#160;&#160;private&#160;static&#160;final&#160;int&#160;DEFAULT_CAPACITY&#160;=&#160;100;

&#160;&#160;&#160;&#160;

&#160;&#160;&#160;&#160;private&#160;int&#160;currentSize;&#160;&#160;&#160;&#160;&#160;&#160;//&#160;Number&#160;of&#160;elements&#160;in&#160;heap

&#160;&#160;&#160;&#160;private&#160;Comparable&#160;[&#160;]&#160;array;&#160;//&#160;The&#160;heap&#160;array

&#160;&#160;&#160;&#160;

&#160;&#160;&#160;&#160;/**

&#160;&#160;&#160;&#160;&#160;*&#160;Internal&#160;method&#160;to&#160;percolate&#160;down&#160;in&#160;the&#160;heap.

&#160;&#160;&#160;&#160;&#160;*&#160;@param&#160;hole&#160;the&#160;index&#160;at&#160;which&#160;the&#160;percolate&#160;begins.

&#160;&#160;&#160;&#160;&#160;*/

&#160;&#160;&#160;&#160;private&#160;void&#160;percolateDown(&#160;int&#160;hole&#160;)&#160;{

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int&#160;child;

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Comparable&#160;tmp&#160;=&#160;array[&#160;hole&#160;];

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for(&#160;;&#160;hole&#160;*&#160;2&#160;&lt;=&#160;currentSize;&#160;hole&#160;=&#160;child&#160;)&#160;{

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;child&#160;=&#160;hole&#160;*&#160;2;

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if(&#160;child&#160;!=&#160;currentSize&#160;&amp;&amp;

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;array[&#160;child&#160;+&#160;1&#160;].compareTo(&#160;array[&#160;child&#160;]&#160;)&#160;&lt;&#160;0&#160;)

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;child++;

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if(&#160;array[&#160;child&#160;].compareTo(&#160;tmp&#160;)&#160;&lt;&#160;0&#160;)

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;array[&#160;hole&#160;]&#160;=&#160;array[&#160;child&#160;];

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;array[&#160;hole&#160;]&#160;=&#160;tmp;

&#160;&#160;&#160;&#160;}

&#160;&#160;&#160;&#160;

&#160;&#160;&#160;&#160;/**

&#160;&#160;&#160;&#160;&#160;*&#160;Internal&#160;method&#160;to&#160;extend&#160;array.

&#160;&#160;&#160;&#160;&#160;*/

&#160;&#160;&#160;&#160;private&#160;void&#160;doubleArray(&#160;)&#160;{

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Comparable&#160;[&#160;]&#160;newArray;

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;newArray&#160;=&#160;new&#160;Comparable[&#160;array.length&#160;*&#160;2&#160;];

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for(&#160;int&#160;i&#160;=&#160;0;&#160;i&#160;&lt;&#160;array.length;&#160;i++&#160;)

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;newArray[&#160;i&#160;]&#160;=&#160;array[&#160;i&#160;];

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;array&#160;=&#160;newArray;

&#160;&#160;&#160;&#160;}

&#160;&#160;&#160;&#160;

&#160;&#160;&#160;&#160;//&#160;Test&#160;program

&#160;&#160;&#160;&#160;public&#160;static&#160;void&#160;main(&#160;String&#160;[&#160;]&#160;args&#160;)&#160;{

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int&#160;numItems&#160;=&#160;10000;

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BinaryHeap&#160;h1&#160;=&#160;new&#160;BinaryHeap(&#160;);

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Integer&#160;[&#160;]&#160;items&#160;=&#160;new&#160;Integer[&#160;numItems&#160;-&#160;1&#160;];

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int&#160;i&#160;=&#160;37;

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int&#160;j;

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for(&#160;i&#160;=&#160;37,&#160;j&#160;=&#160;0;&#160;i&#160;!=&#160;0;&#160;i&#160;=&#160;(&#160;i&#160;+&#160;37&#160;)&#160;%&#160;numItems,&#160;j++&#160;)&#160;{

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;h1.insert(&#160;new&#160;Integer(&#160;i&#160;)&#160;);

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;items[&#160;j&#160;]&#160;=&#160;new&#160;Integer(&#160;i&#160;);

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for(&#160;i&#160;=&#160;1;&#160;i&#160;&lt;&#160;numItems;&#160;i++&#160;)

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if(&#160;((Integer)(&#160;h1.deleteMin(&#160;)&#160;)).intValue(&#160;)&#160;!=&#160;i&#160;)

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.println(&#160;&quot;Oops!&#160;&quot;&#160;+&#160;i&#160;);

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BinaryHeap&#160;h2&#160;=&#160;new&#160;BinaryHeap(&#160;items&#160;);

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for(&#160;i&#160;=&#160;1;&#160;i&#160;&lt;&#160;numItems;&#160;i++&#160;)

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if(&#160;((Integer)(&#160;h2.deleteMin(&#160;)&#160;)).intValue(&#160;)&#160;!=&#160;i&#160;)

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.println(&#160;&quot;Oops!&#160;&quot;&#160;+&#160;i&#160;);

&#160;&#160;&#160;&#160;}

}



//&#160;PriorityQueue&#160;interface

//

//&#160;******************PUBLIC&#160;OPERATIONS*********************

//&#160;Position&#160;insert(&#160;x&#160;)&#160;&#160;&#160;--&gt;&#160;Insert&#160;x

//&#160;Comparable&#160;deleteMin(&#160;)--&gt;&#160;Return&#160;and&#160;remove&#160;smallest&#160;item

//&#160;Comparable&#160;findMin(&#160;)&#160;&#160;--&gt;&#160;Return&#160;smallest&#160;item

//&#160;boolean&#160;isEmpty(&#160;)&#160;&#160;&#160;&#160;&#160;--&gt;&#160;Return&#160;true&#160;if&#160;empty;&#160;else&#160;false

//&#160;void&#160;makeEmpty(&#160;)&#160;&#160;&#160;&#160;&#160;&#160;--&gt;&#160;Remove&#160;all&#160;items

//&#160;int&#160;size(&#160;)&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;--&gt;&#160;Return&#160;size

//&#160;void&#160;decreaseKey(&#160;p,&#160;v)--&gt;&#160;Decrease&#160;value&#160;in&#160;p&#160;to&#160;v

//&#160;******************ERRORS********************************

//&#160;Throws&#160;UnderflowException&#160;for&#160;findMin&#160;and&#160;deleteMin&#160;when&#160;empty



/**

&#160;*&#160;PriorityQueue&#160;interface.

&#160;*&#160;Some&#160;priority&#160;queues&#160;may&#160;support&#160;a&#160;decreaseKey&#160;operation,

&#160;*&#160;but&#160;this&#160;is&#160;considered&#160;an&#160;advanced&#160;operation.&#160;If&#160;so,

&#160;*&#160;a&#160;Position&#160;is&#160;returned&#160;by&#160;insert.

&#160;*&#160;Note&#160;that&#160;all&#160;&quot;matching&quot;&#160;is&#160;based&#160;on&#160;the&#160;compareTo&#160;method.

&#160;*&#160;@author&#160;Mark&#160;Allen&#160;Weiss

&#160;*/

public&#160;interface&#160;PriorityQueue&#160;{

&#160;&#160;&#160;&#160;/**

&#160;&#160;&#160;&#160;&#160;*&#160;The&#160;Position&#160;interface&#160;represents&#160;a&#160;type&#160;that&#160;can

&#160;&#160;&#160;&#160;&#160;*&#160;be&#160;used&#160;for&#160;the&#160;decreaseKey&#160;operation.

&#160;&#160;&#160;&#160;&#160;*/

&#160;&#160;&#160;&#160;public&#160;interface&#160;Position&#160;{

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/**

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*&#160;Returns&#160;the&#160;value&#160;stored&#160;at&#160;this&#160;position.

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*&#160;@return&#160;the&#160;value&#160;stored&#160;at&#160;this&#160;position.

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*/

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Comparable&#160;getValue(&#160;);

&#160;&#160;&#160;&#160;}

&#160;&#160;&#160;&#160;

&#160;&#160;&#160;&#160;/**

&#160;&#160;&#160;&#160;&#160;*&#160;Insert&#160;into&#160;the&#160;priority&#160;queue,&#160;maintaining&#160;heap&#160;order.

&#160;&#160;&#160;&#160;&#160;*&#160;Duplicates&#160;are&#160;allowed.

&#160;&#160;&#160;&#160;&#160;*&#160;@param&#160;x&#160;the&#160;item&#160;to&#160;insert.

&#160;&#160;&#160;&#160;&#160;*&#160;@return&#160;may&#160;return&#160;a&#160;Position&#160;useful&#160;for&#160;decreaseKey.

&#160;&#160;&#160;&#160;&#160;*/

&#160;&#160;&#160;&#160;Position&#160;insert(&#160;Comparable&#160;x&#160;);

&#160;&#160;&#160;&#160;

&#160;&#160;&#160;&#160;/**

&#160;&#160;&#160;&#160;&#160;*&#160;Find&#160;the&#160;smallest&#160;item&#160;in&#160;the&#160;priority&#160;queue.

&#160;&#160;&#160;&#160;&#160;*&#160;@return&#160;the&#160;smallest&#160;item.

&#160;&#160;&#160;&#160;&#160;*&#160;@throws&#160;UnderflowException&#160;if&#160;empty.

&#160;&#160;&#160;&#160;&#160;*/

&#160;&#160;&#160;&#160;Comparable&#160;findMin(&#160;);

&#160;&#160;&#160;&#160;

&#160;&#160;&#160;&#160;/**

&#160;&#160;&#160;&#160;&#160;*&#160;Remove&#160;the&#160;smallest&#160;item&#160;from&#160;the&#160;priority&#160;queue.

&#160;&#160;&#160;&#160;&#160;*&#160;@return&#160;the&#160;smallest&#160;item.

&#160;&#160;&#160;&#160;&#160;*&#160;@throws&#160;UnderflowException&#160;if&#160;empty.

&#160;&#160;&#160;&#160;&#160;*/

&#160;&#160;&#160;&#160;Comparable&#160;deleteMin(&#160;);

&#160;&#160;&#160;&#160;

&#160;&#160;&#160;&#160;/**

&#160;&#160;&#160;&#160;&#160;*&#160;Test&#160;if&#160;the&#160;priority&#160;queue&#160;is&#160;logically&#160;empty.

&#160;&#160;&#160;&#160;&#160;*&#160;@return&#160;true&#160;if&#160;empty,&#160;false&#160;otherwise.

&#160;&#160;&#160;&#160;&#160;*/

&#160;&#160;&#160;&#160;boolean&#160;isEmpty(&#160;);

&#160;&#160;&#160;&#160;

&#160;&#160;&#160;&#160;/**

&#160;&#160;&#160;&#160;&#160;*&#160;Make&#160;the&#160;priority&#160;queue&#160;logically&#160;empty.

&#160;&#160;&#160;&#160;&#160;*/

&#160;&#160;&#160;&#160;void&#160;makeEmpty(&#160;);

&#160;&#160;&#160;&#160;

&#160;&#160;&#160;&#160;/**

&#160;&#160;&#160;&#160;&#160;*&#160;Returns&#160;the&#160;size.

&#160;&#160;&#160;&#160;&#160;*&#160;@return&#160;current&#160;size.

&#160;&#160;&#160;&#160;&#160;*/

&#160;&#160;&#160;&#160;int&#160;size(&#160;);

&#160;&#160;&#160;&#160;

&#160;&#160;&#160;&#160;/**

&#160;&#160;&#160;&#160;&#160;*&#160;Change&#160;the&#160;value&#160;of&#160;the&#160;item&#160;stored&#160;in&#160;the&#160;pairing&#160;heap.

&#160;&#160;&#160;&#160;&#160;*&#160;This&#160;is&#160;considered&#160;an&#160;advanced&#160;operation&#160;and&#160;might&#160;not

&#160;&#160;&#160;&#160;&#160;*&#160;be&#160;supported&#160;by&#160;all&#160;priority&#160;queues.&#160;A&#160;priority&#160;queue

&#160;&#160;&#160;&#160;&#160;*&#160;will&#160;signal&#160;its&#160;intention&#160;to&#160;not&#160;support&#160;decreaseKey&#160;by

&#160;&#160;&#160;&#160;&#160;*&#160;having&#160;insert&#160;return&#160;null&#160;consistently.

&#160;&#160;&#160;&#160;&#160;*&#160;@param&#160;p&#160;any&#160;non-null&#160;Position&#160;returned&#160;by&#160;insert.

&#160;&#160;&#160;&#160;&#160;*&#160;@param&#160;newVal&#160;the&#160;new&#160;value,&#160;which&#160;must&#160;be&#160;smaller

&#160;&#160;&#160;&#160;&#160;*&#160;&#160;&#160;&#160;than&#160;the&#160;currently&#160;stored&#160;value.

&#160;&#160;&#160;&#160;&#160;*&#160;@throws&#160;IllegalArgumentException&#160;if&#160;p&#160;invalid.

&#160;&#160;&#160;&#160;&#160;*&#160;@throws&#160;UnsupportedOperationException&#160;if&#160;appropriate.

&#160;&#160;&#160;&#160;&#160;*/

&#160;&#160;&#160;&#160;void&#160;decreaseKey(&#160;Position&#160;p,&#160;Comparable&#160;newVal&#160;);

}





/**

&#160;*&#160;Exception&#160;class&#160;for&#160;access&#160;in&#160;empty&#160;containers

&#160;*&#160;such&#160;as&#160;stacks,&#160;queues,&#160;and&#160;priority&#160;queues.

&#160;*&#160;@author&#160;Mark&#160;Allen&#160;Weiss

&#160;*/

public&#160;class&#160;UnderflowException&#160;extends&#160;RuntimeException&#160;{

&#160;&#160;&#160;&#160;/**

&#160;&#160;&#160;&#160;&#160;*&#160;Construct&#160;this&#160;exception&#160;object.

&#160;&#160;&#160;&#160;&#160;*&#160;@param&#160;message&#160;the&#160;error&#160;message.

&#160;&#160;&#160;&#160;&#160;*/

&#160;&#160;&#160;&#160;public&#160;UnderflowException(&#160;String&#160;message&#160;)&#160;{

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;super(&#160;message&#160;);

&#160;&#160;&#160;&#160;}

}
</CODE>
<TEXT orderid="2" >
&#160;Related Tips 
A custom combobox editor for use with the EditableComboBox class
A demonstration of Java2D transformations
A game of Tic-Tac-Toe that can be played between two client applets
A Label that uses inline HTML to format its text
A program to print limits of the primitive types
A sample of inline DTD definition
A sample of linked DTD definition
A sample XML file

			
		
				

		&#160;

		

			
									
						
							&lt; Prev
					
										&#160;

					
										
						
							Next &gt;
					
								
			
			                







 
Page 1 of 0 ( 0 comments )


       You can share your information about this topic using the form below! 

Please do not post your questions with this form! Thanks.

 

  
    
      
                
          
          

          
          Name (required)

          
          

                    
          

          E-Mail (required)          
                    

          
          
          

          Your email will not be displayed on the site - only to our administrator          
          

          Homepage(optional)







          
          

          Comment          
                    Enable HTML code :
          
          Yes
          
          No 

          
          
          
          

          

 
          

          
          
        
      
    
  





&#160;
      
      
        &#160;
        &#160;
        &#160;
        
        &#160;
      
      
        &#160;
        &#160;
        &#160;
        &#160;
        &#160;
      
    
    
      
        
          &#160;
          &#160;
          &#160;
        
        
          &#160;
          
              &#160;            
          &#160;
        
        
          &#160;
          &#160;
          &#160;
        
      
    
    
      
        
            
            
            
        
      
    
	
	


		
				
			
				
			
		
		
		








Home


-


About Us


-


Privacy Policy






Copyright 2005 - 2008 www.java-tips.org
Java is a trademark of Sun Microsystems, Inc.
</TEXT>
</result>

<?xml version="1.0" encoding="UTF-8"?>
<result>
<description>
<docid>76129</docid>
<orderid>8</orderid>
<type>TEXT</type>
<url>http://www.roseindia.net/javajdktutorials/c12/s2.shtml</url>
</description>
<TEXT orderid="6" >
will sort an array, A, provided either that the base type of
A is one of the primitive types (except boolean) or that A is an array
of Objects that implement the Comparable interface.
You can also sort part of an array.  This is important since arrays
are often only &quot;partially filled.&quot;  The command:
</TEXT>
<CODE orderid="7" >
Arrays.sort(A,fromIndex,toIndex);
</CODE>
<TEXT orderid="8" >
sorts the elements A[fromIndex], A[fromIndex+1], ..., A[toIndex-1]
into ascending order.  You can use Arrays.sort(A,0,N) to sort
a partially filled array which has elements in the first N positions.

Java does not support generic programming for primitive types.
In order to implement the command Arrays.sort(A), the Arrays
class contains eight methods:  one method for arrays of Objects and
one method for each of the  primitive types byte, short, int,
long, float, double, and char.




The TreeSet and HashSet Classes

A set is a collection of Objects in which no object occurs
more than once.  Objects obj1 and obj2 are considered
to be the same if obj1.equals(obj2) is true, as discussed in
the previous section.  Sets implement all the general Collection
methods, but do so in a way that ensures that no element occurs twice
in the set.  For example, if set is an object of type Set,
then set.add(obj) will have no effect on the set if obj is
already an element of the set.  Java has two classes that implement the
Set interface:  java.util.TreeSet and java.util.HashSet.

In addition to being a Set, a TreeSet has the property
that the elements of the set are arranged into ascending sorted order.
An Iterator for a TreeSet will always visit the elements
of the set in ascending order.

A TreeSet cannot hold arbitrary objects, since
there must be a way to determine the sorted order of the objects it contains.
Ordinarily, this means that the objects in a TreeSet should implement
the Comparable interface and that obj1.compareTo(obj2) should
be defined in a reasonable way for any two objects obj1 and obj2
in the set.  Alternatively, a Comparator can be provided as a parameter
to the constructor when the TreeSet is created.  In that case, the
Comparator will be used to compare objects that are added to the set.

In the implementation of a TreeSet, the elements are stored in
something like a binary sort tree.  (See Section&#160;11.4.)
The actually type of tree that is used is balanced in 
the sense that all the leaves of the tree are at about the same distance from the
root of the tree.  The number of operations required to find an item in a sorted tree
is the same as the distance from the root of the tree to the item.  Using a balanced
tree ensures that all items are as close to the root as possible.  This makes
finding an item very efficient.  Adding and removing elements are equally efficient.

The fact that a TreeSet sorts its elements and removes duplicates
makes it very useful in some applications.  In Section 10.3,
I presented a program, WordList.java, that
reads all the words in a file and outputs a list of the words it found.  The list
is sorted and duplicates have been removed.  In that program, I used a linked list to
store the words and had to write a subroutine to make sure that the list was
sorted and contained no duplicates.  By using a TreeSet instead of a list,
that part of the programming is taken care of automatically.  An algorithm for
the program, using a TreeSet, would be:
</TEXT>
<CODE orderid="9" >
TreeSet words = new TreeSet();
         
         while there is more data in the input file:
            Let word = the next word from the file.
            words.add(word);
         
         Iterator iter = words.iterator();
         while (iter.hasNext()):
            Write iter.next() to the output file.
</CODE>
<TEXT orderid="10" >
If you would like to see a complete, working program, you can find it
in the file WordListWithTreeSet.java.

As another example, suppose that coll is any Collection of 
Strings (or any other type for which compareTo() is properly
defined).  We can use a TreeSet to sort the items of coll and
remove the duplicates simply by saying:
</TEXT>
</result>

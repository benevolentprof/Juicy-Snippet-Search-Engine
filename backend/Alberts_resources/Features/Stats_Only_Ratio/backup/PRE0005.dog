 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Java Tutorial: Arrays^0.0^0.0^0.0^0.0^0.0^0.047619047619047616^3.0^0.0^text
 ^0.14285714285714285^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Loading^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
Please wait...^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.5^text
Attention Necessary^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Alert body passed to window.alert^0.0^0.0^0.0^0.0^0.0^0.0^6.0^0.16666666666666666^text
OK^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^10.666666666666666^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^16.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^20.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^20.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^24.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^24.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Enter your search terms^0.0^0.0^0.0^0.0^0.0^0.0^4.0^0.25^text
 ^24.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^24.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Submit search form^0.0^0.0^0.0^0.0^0.0^0.0^3.0^0.0^text
 ^24.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^20.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^16.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^16.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^20.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^20.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^24.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^28.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^32.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^36.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^36.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^40.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Web^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 ^36.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^32.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^32.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^36.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^36.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Java Tutorial^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.0^text
 ^32.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^28.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^24.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^24.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^24.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^24.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^24.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^24.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^24.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^24.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^24.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^24.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^24.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^20.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^16.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^10.666666666666666^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Java Tutorial^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^5.333333333333333^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^5.333333333333333^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Watch our 3-minute video to find out how you can learn Java with a live instructor^4.0^0.0^0.0^0.0^0.0^0.0^16.0^0.5^text
. ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Table of Contents^0.0^0.0^0.0^0.0^0.0^0.0^3.0^0.3333333333333333^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^19.428571428571427^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Java Introduction^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Conventions in These Notes^0.0^0.0^0.0^0.0^0.0^0.0^4.0^0.5^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
The Java Environment - Overview^0.0^0.0^0.0^0.0^0.0^0.0^4.0^0.25^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Writing a Java Program^0.0^0.0^0.0^0.0^0.0^0.0^4.0^0.25^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Obtaining The Java Environment^0.0^0.0^0.0^0.0^0.0^0.0^4.0^0.25^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Setting up your Java Environment^0.0^0.0^0.0^0.0^0.0^0.0^5.0^0.4^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Creating a Class That Can Run as a Program^0.0^0.0^0.0^0.1111111111111111^0.0^0.0^9.0^0.5555555555555556^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Useful Stuff Necessary to go Further^0.0^0.0^0.0^0.0^0.0^0.0^6.0^0.5^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
First Java Program^0.0^0.0^0.0^0.0^0.0^0.0^3.0^0.3333333333333333^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Using the Java Documentation^0.0^0.0^0.0^0.0^0.0^0.0^4.0^0.25^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^24.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Java Basics^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Basic Java Syntax^0.0^0.0^0.0^0.0^0.0^0.0^3.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Data^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Mathematics in Java^0.0^0.0^0.0^0.0^0.0^0.0^3.0^0.3333333333333333^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Creating and Using Methods^0.0^0.0^0.0^0.0^0.0^0.0^4.0^0.25^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Method Exercise^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^24.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Java Objects^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 Objects^12.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Object Definition^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Payroll01: Creating an Employee Class ^0.0^0.0^0.2^0.2^0.0^0.02631578947368421^5.0^0.2^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Payroll02: Adding an Employee Constructor^0.0^0.0^0.2^0.0^0.0^0.024390243902439025^5.0^0.2^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Payroll03: Overloading Employee Constructors^0.0^0.0^0.25^0.0^0.0^0.022727272727272728^4.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Payroll04: Using the this Reference^0.0^0.0^0.2^0.2^0.0^0.02857142857142857^5.0^0.2^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Payroll05: A static Property in Employee^0.0^0.0^0.16666666666666666^0.16666666666666666^0.0^0.025^6.0^0.3333333333333333^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Payroll06: Creating an employees package^0.0^0.0^0.2^0.2^0.0^0.025^5.0^0.2^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Payroll07: Using KeyboardReader in Payroll^0.0^0.0^0.4^0.0^0.0^0.023809523809523808^5.0^0.2^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
String, StringBuffer, and StringBuilder^0.0^0.0^0.5^0.0^0.0^0.0^4.0^0.25^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Creating Documentation Comments and Using javadoc^0.0^0.0^0.16666666666666666^0.0^0.0^0.0^6.0^0.16666666666666666^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Payroll08: Creating and Using javadoc Comments^0.0^0.0^0.3333333333333333^0.0^0.0^0.021739130434782608^6.0^0.16666666666666666^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Primitives and Wrapper Classes ^0.0^0.0^0.0^0.0^0.0^0.0^4.0^0.25^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^24.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Comparisons And Flow Control Structures^0.0^0.0^0.0^0.0^0.0^0.0^5.0^0.2^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Controlling Program Flow^0.0^0.0^0.0^0.0^0.0^0.0^3.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Game01: A Guessing Game^0.0^0.0^0.25^0.0^0.0^0.043478260869565216^4.0^0.25^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Payroll-Control01: Modified Payroll^0.0^0.0^0.25^0.0^0.0^0.02857142857142857^4.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Game02: A Revised Guessing Game^0.0^0.0^0.2^0.0^0.0^0.03225806451612903^5.0^0.2^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Game03: Multiple Levels^0.0^0.0^0.3333333333333333^0.0^0.0^0.043478260869565216^3.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Payroll-Control02: Payroll With a Loop^0.0^0.0^0.16666666666666666^0.0^0.0^0.02631578947368421^6.0^0.3333333333333333^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Game04: Guessing Game with a Loop^0.0^0.0^0.16666666666666666^0.0^0.0^0.030303030303030304^6.0^0.3333333333333333^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Additional Loop Control: break and continue^0.0^0.0^0.0^0.3333333333333333^0.0^0.023255813953488372^6.0^0.16666666666666666^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Classpath, Code Libraries, and Jar files^0.0^0.0^0.16666666666666666^0.0^0.0^0.0^6.0^0.16666666666666666^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Creating and Using an External Library^0.0^0.0^0.0^0.0^0.0^0.0^6.0^0.3333333333333333^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Compiling to a Different Directory^0.0^0.0^0.0^0.0^0.0^0.0^5.0^0.4^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^24.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Arrays^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Arrays^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Using the args Array^0.0^0.0^0.25^0.0^0.0^0.0^4.0^0.25^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Game-Arrays01: A Guessing Game with Random Messages^0.0^0.0^0.125^0.0^0.0^0.0196078431372549^8.0^0.25^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Payroll-Arrays01: An Array of employees^0.0^0.0^0.16666666666666666^0.0^0.0^0.02564102564102564^6.0^0.3333333333333333^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Enhanced for Loops - the For-Each Loop ^0.0^0.0^0.0^0.2857142857142857^0.0^0.0^7.0^0.2857142857142857^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Multi-Dimensional Arrays^0.0^0.0^0.0^0.0^0.0^0.0^3.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Payroll-Arrays02: An Array for Dependents (optional) ^0.0^0.0^0.14285714285714285^0.14285714285714285^0.03773584905660377^0.018867924528301886^7.0^0.14285714285714285^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Typecasting with Arrays of Primitives ^0.0^0.0^0.0^0.0^0.0^0.0^5.0^0.4^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^24.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Inheritance^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Inheritance^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Polymorphism^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Creating a Derived Class^0.0^0.0^0.0^0.25^0.0^0.0^4.0^0.25^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Example - Factoring Person Out of Employee and Dependent ^0.0^0.0^0.0^0.0^0.0^0.0^8.0^0.25^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Payroll-Inheritance01: Adding	Types of Employees ^0.0^0.0^0.16666666666666666^0.0^0.0^0.02040816326530612^6.0^0.16666666666666666^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Typecasting with Object References^0.0^0.0^0.0^0.0^0.0^0.0^4.0^0.25^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Payroll-Inheritance02: Using the Employee Subclasses^0.0^0.0^0.16666666666666666^0.0^0.0^0.019230769230769232^6.0^0.16666666666666666^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Other Inheritance-Related Keywords^0.0^0.0^0.0^0.0^0.0^0.0^4.0^0.25^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Payroll-Inheritance03: Making our base classes abstract^0.0^0.0^0.14285714285714285^0.14285714285714285^0.0^0.01818181818181818^7.0^0.14285714285714285^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Methods Inherited from Object^0.0^0.0^0.0^0.0^0.0^0.0^4.0^0.25^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^24.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Interfaces^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Interfaces^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Creating an Interface Definition^0.0^0.0^0.0^0.25^0.0^0.0^4.0^0.25^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Implementing Interfaces^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Reference Variables and Interfaces^0.0^0.0^0.0^0.0^0.0^0.0^4.0^0.25^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Interfaces and Inheritance^0.0^0.0^0.0^0.0^0.0^0.0^3.0^0.3333333333333333^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Exercise: Payroll-Interfaces01^0.0^0.0^0.3333333333333333^0.0^0.0^0.03333333333333333^3.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Some Uses for Interfaces^0.0^0.0^0.0^0.25^0.0^0.0^4.0^0.25^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^24.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Exceptions^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Exceptions^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Attempting Risky Code - try and catch ^0.0^0.0^0.0^0.3333333333333333^0.0^0.0^6.0^0.16666666666666666^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Guaranteeing Execution of Code - the finally Block^0.0^0.0^0.0^0.14285714285714285^0.0^0.0^7.0^0.2857142857142857^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Letting an Exception be Thrown to the Method Caller^0.0^0.0^0.0^0.0^0.0^0.0^9.0^0.4444444444444444^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Throwing an Exception^0.0^0.0^0.0^0.0^0.0^0.0^3.0^0.3333333333333333^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Payroll-Exceptions01: Handling NumberFormatException in Payroll^0.0^0.0^0.3333333333333333^0.0^0.0^0.015873015873015872^6.0^0.16666666666666666^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Payroll-Exceptions01, continued^0.0^0.0^0.3333333333333333^0.0^0.0^0.0^3.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Exceptions and Inheritance^0.0^0.0^0.0^0.0^0.0^0.0^3.0^0.3333333333333333^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 Creating and Using Your Own Exception Classes^1.0^0.0^0.0^0.0^0.0^0.0^7.0^0.42857142857142855^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Payroll-Exceptions02^0.0^0.0^0.5^0.0^0.0^0.0^2.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Rethrowing Exceptions^0.0^0.0^0.5^0.0^0.0^0.0^2.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Initializer Blocks^0.0^0.0^0.5^0.0^0.0^0.0^2.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^24.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Inner Classes^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Inner Classes, aka Nested Classes^0.0^0.0^0.2^0.0^0.0^0.0^5.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^24.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Collections^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Collections^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^20.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Webucator Tutorials^0.0^0.0^0.5^0.0^0.0^0.0^2.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Ajax Tutorial^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
ColdFusion Tutorial^0.0^0.0^0.5^0.0^0.0^0.0^2.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
CSS Tutorial^0.0^0.0^0.5^0.0^0.0^0.0^2.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
HTML Tutorial^0.0^0.0^0.5^0.0^0.0^0.0^2.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
JavaScript Tutorial^0.0^0.0^0.5^0.0^0.0^0.0^2.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
PHP Tutorial^0.0^0.0^0.5^0.0^0.0^0.0^2.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Schema Tutorial^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
SQL Tutorial^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
MySQL Tutorial^0.0^0.0^0.5^0.0^0.0^0.0^2.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
XML Tutorial^0.0^0.0^0.5^0.0^0.0^0.0^2.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
XSL-FO Tutorial^0.0^0.0^0.6666666666666666^0.0^0.0^0.0^3.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
XSLT Tutorial^0.0^0.0^0.5^0.0^0.0^0.0^2.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Web Accessibility Tutorial^0.0^0.0^0.0^0.0^0.0^0.0^3.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Silverlight Tutorial^0.0^0.0^0.5^0.0^0.0^0.0^2.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Java Tutorial^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Webucator Resources^0.0^0.0^0.5^0.0^0.0^0.0^2.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
SQL Training^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Windows Training^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^10.666666666666666^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
HTML Training^0.0^0.0^0.5^0.0^0.0^0.0^2.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^10.666666666666666^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
CSS Training^0.0^0.0^0.5^0.0^0.0^0.0^2.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
JavaScript Training^0.0^0.0^0.5^0.0^0.0^0.0^2.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Ajax Training^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
PHP Training^0.0^0.0^0.5^0.0^0.0^0.0^2.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^10.666666666666666^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
XML Training^0.0^0.0^0.5^0.0^0.0^0.0^2.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^10.666666666666666^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Java Training^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^10.666666666666666^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Dreamweaver Training^0.0^0.0^0.5^0.0^0.0^0.0^2.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Flash Training^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Flex Training^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Photoshop Training^0.0^0.0^0.5^0.0^0.0^0.0^2.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^10.666666666666666^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Captivate Training^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^10.666666666666666^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
SSRS Training^0.0^0.0^0.5^0.0^0.0^0.0^2.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
SSAS Training^0.0^0.0^0.5^0.0^0.0^0.0^2.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
SSIS Training^0.0^0.0^0.5^0.0^0.0^0.0^2.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^10.666666666666666^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Silverlight Training^0.0^0.0^0.5^0.0^0.0^0.0^2.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^13.666666666666666^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Bookmark this page: ^0.0^0.0^0.0^0.3333333333333333^0.0^0.05^3.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Add To Digg^0.0^0.0^0.3333333333333333^0.0^0.0^0.0^3.0^0.3333333333333333^text
 ^2.6666666666666665^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Add to reddit^0.0^0.0^0.3333333333333333^0.0^0.0^0.0^3.0^0.3333333333333333^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Add to Yahoo! My Web^0.0^0.0^0.0^0.0^0.0^0.05^5.0^0.4^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Add To Del.icio.us^0.0^0.0^0.2^0.0^0.0^0.0^5.0^0.4^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Add to Stumble Upon^0.0^0.0^0.0^0.0^0.0^0.0^4.0^0.5^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Add to Spurl^0.0^0.0^0.3333333333333333^0.0^0.0^0.0^3.0^0.3333333333333333^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Add to Furl^0.0^0.0^0.0^0.0^0.0^0.0^3.0^0.3333333333333333^text
 ^2.6666666666666665^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Add to Ma.gnolia^0.0^0.0^0.25^0.0^0.0^0.0^4.0^0.25^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Add to Slashdot^0.0^0.0^0.3333333333333333^0.0^0.0^0.0^3.0^0.3333333333333333^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Add to Mister Wong^0.0^0.0^0.0^0.0^0.0^0.0^4.0^0.25^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Arrays^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 ^1.6^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
In this lesson of the Java tutorial, you will learn...^0.0^0.0^0.0^0.1^0.0^0.0^10.0^0.5^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Understand how arrays are implemented in Java^0.0^0.0^0.0^0.0^0.0^0.0^7.0^0.42857142857142855^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Declare, instantiate, populate, and use arrays of primitives^0.0^0.0^0.0^0.0^0.0^0.0^8.0^0.25^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Use arrays of objects^0.0^0.0^0.0^0.0^0.0^0.0^4.0^0.25^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Use multi-dimensional arrays ^0.0^0.0^0.0^0.0^0.0^0.0^4.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Arrays^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Defining and Declaring Arrays^0.0^0.0^0.0^0.0^0.0^0.0^4.0^0.25^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
An array stores a group of data items all of the same type^0.0^0.0^0.0^0.0^0.0^0.0^13.0^0.5384615384615384^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
An array is an object^0.0^0.0^0.0^0.0^0.0^0.0^5.0^0.6^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
an array variable does not actually store the array - it is a reference variable that points to an array object^12.0^0.0^0.0^0.0^0.0^0.0^20.0^0.45^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
declaring the array variable does not create an array object instance; it merely creates the reference variable - the array object must be instantiated separately^16.0^0.0^0.041666666666666664^0.0^0.0058823529411764705^0.0^24.0^0.3333333333333333^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
once instantiated, the array object contains a block of memory locations for the individual elements^12.0^0.0^0.06666666666666667^0.06666666666666667^0.0^0.0^15.0^0.3333333333333333^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
if the individual elements are not explicitly initialized, they will be set to zero^12.0^0.0^0.0^0.07142857142857142^0.0^0.0^14.0^0.5^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
arrays can be created with a size that is determined dynamically (but once created, the size is fixed)^12.0^0.0^0.0^0.0^0.018867924528301886^0.0^18.0^0.5555555555555556^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Declare an array variable by specifying the type of data to be stored, followed by square brackets ^8.0^0.0^0.0^0.0^0.0^0.0^17.0^0.4117647058823529^text
[]^0.0^0.0^0.0^0.0^1.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Syntax^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
dataType^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
[] ^0.0^0.0^0.0^0.0^0.6666666666666666^0.0^0.0^0.0^text
variableName^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
;^0.0^0.0^0.0^0.0^1.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
you can read the ^0.0^0.0^0.0^0.0^0.0^0.0^4.0^0.75^text
[] ^0.0^0.0^0.0^0.0^0.6666666666666666^0.0^0.0^0.0^text
as the word "array"^0.0^0.0^0.0^0.0^0.0^0.0^4.0^0.5^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
To declare a variable for an array of integers:^0.0^0.0^0.0^0.1111111111111111^0.0^0.02127659574468085^9.0^0.4444444444444444^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
int[] nums;^0.0^0.0^0.5^0.5^0.2727272727272727^0.0^2.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
which you can read as "^0.0^0.0^0.0^0.0^0.0^0.0^5.0^0.8^text
int^0.0^0.0^0.0^1.0^0.0^0.0^1.0^0.0^text
 array ^1.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
nums^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
"^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
To declare a variable for an array of ^0.0^0.0^0.0^0.125^0.0^0.0^8.0^0.5^text
String^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 objects:^1.0^0.0^0.0^0.0^0.0^0.1111111111111111^1.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
String[] names;^0.0^0.0^0.0^0.0^0.2^0.0^2.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
which you can read as "^0.0^0.0^0.0^0.0^0.0^0.0^5.0^0.8^text
String^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 array ^1.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
names^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
" - the array holds ^12.0^0.0^0.0^0.0^0.0^0.0^3.0^0.3333333333333333^text
String^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 references^1.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
You may also put the brackets after the variable name (as in C/C++), but that is less clearly related to how Java actually works^8.0^0.0^0.0^0.0^0.015267175572519083^0.015267175572519083^25.0^0.64^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
int nums[]; // not recommended, but legal^0.0^1.0^0.16666666666666666^0.16666666666666666^0.07317073170731707^0.0^6.0^0.3333333333333333^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Instantiating Arrays^0.0^0.0^0.5^0.0^0.0^0.0^2.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Instantiate an array object using ^0.0^0.0^0.0^0.0^0.0^0.0^5.0^0.2^text
new^0.0^0.0^0.0^1.0^0.0^0.0^1.0^0.0^text
, the data type, and an array size in square brackets^8.0^0.0^0.0^0.0^0.0^0.0^10.0^0.4^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
int[] nums; nums = new int[10];^0.0^0.0^0.4^0.6^0.1875^0.03125^5.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
the second line constructs a new array object with 10 integer elements, all initialized to 0, and stores the reference into ^12.0^0.0^0.0^0.05263157894736842^0.0^0.0^19.0^0.42105263157894735^text
nums^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
int[] moreNums; int size = 7; moreNums = new int[size];^0.0^0.0^0.25^0.5^0.12280701754385964^0.03508771929824561^8.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
you can declare and instantiate all at once^0.0^0.0^0.0^0.0^0.0^0.0^8.0^0.75^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
String[] names = new String[3];^0.0^0.0^0.0^0.25^0.16129032258064516^0.03225806451612903^4.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
the elements of the array, ^0.0^0.0^0.0^0.0^0.0^0.0^5.0^0.6^text
String^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 references, are initialized to ^12.5^0.0^0.0^0.0^0.0^0.0^4.0^0.5^text
null^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
As objects, arrays also have a useful property: ^0.0^0.0^0.0^0.0^0.0^0.020833333333333332^8.0^0.5^text
length^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
in the above example, ^0.0^0.0^0.0^0.0^0.0^0.0^4.0^0.75^text
names.length^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.0^text
 would be 3^1.0^0.0^0.0^0.0^0.0^0.0^2.0^1.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
the property is fixed (i.e., it is read-only)^0.0^0.0^0.0^0.0^0.044444444444444446^0.0^10.0^0.5^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
You can reassign a new array to an existing variable^0.0^0.0^0.0^0.1^0.0^0.0^10.0^0.5^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
int[] nums; nums = new int[10]; nums = new int[20];^0.0^0.0^0.375^0.625^0.16981132075471697^0.03773584905660377^8.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
the original ten-element array is no longer referenced by ^0.0^0.0^0.0^0.0^0.0^0.0^10.0^0.5^text
nums^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
, since it now points to the new, larger array^12.0^0.0^0.0^0.1111111111111111^0.0^0.0^9.0^0.5555555555555556^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Initializing Arrays^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
An array can be initialized when it is created^0.0^0.0^0.0^0.0^0.0^0.0^9.0^0.6666666666666666^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
the notation looks like this:^0.0^0.0^0.0^0.2^0.0^0.034482758620689655^5.0^0.2^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
String[] names = { "Joe", "Jane", "Herkimer" };^0.0^0.0^0.0^0.0^0.10638297872340426^0.02127659574468085^5.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
or^0.0^0.0^0.0^0.0^0.0^0.0^1.0^1.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
String[] names = new String[] {"Joe", "Jane", "Herkimer" };^0.0^0.0^0.0^0.14285714285714285^0.11864406779661017^0.01694915254237288^7.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
this automatically creates an array of length 3, because there were 3 items supplied^12.0^0.0^0.0^0.08333333333333333^0.0^0.0^12.0^0.4166666666666667^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
int[] nums = new int[] { 2, 4, 6, 8, 10, 12 };^0.0^0.0^0.25^0.75^0.15217391304347827^0.021739130434782608^4.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
this array will have a length of 6^0.0^0.0^0.0^0.14285714285714285^0.0^0.0^7.0^0.5714285714285714^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
If a new array is being assigned to an existing variable, you cannot use the shorter variant, you must use the ^8.0^0.0^0.0^0.09523809523809523^0.0^0.0^21.0^0.5238095238095238^text
new^0.0^0.0^0.0^1.0^0.0^0.0^1.0^0.0^text
 keyword and the data type:^8.5^0.0^0.0^0.0^0.0^0.03333333333333333^5.0^0.4^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
String[] names; names = new String[] {"Joe", "Jane", "Herkimer" };^0.0^0.0^0.0^0.125^0.11940298507462686^0.014925373134328358^8.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
For arrays of other types of objects:^0.0^0.0^0.0^0.14285714285714285^0.0^0.02702702702702703^7.0^0.42857142857142855^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Book[] titles; titles = new Book[] { new Book(5011, "Fishing Explained"), new Book(1234, "Help is on the Way") };^1.6^0.0^0.0^0.1875^0.09523809523809523^0.007936507936507936^16.0^0.1875^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Working With Arrays^0.0^0.0^0.0^0.0^0.0^0.0^3.0^0.3333333333333333^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Array elements are accessed through the array reference, by their array index^8.0^0.0^0.0^0.0^0.0^0.0^12.0^0.4166666666666667^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
the index is the element number, placed within brackets^0.0^0.0^0.0^0.0^0.0^0.0^9.0^0.4444444444444444^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
elements are numbered from 0 to one less than the specified size^0.0^0.0^0.0^0.0^0.0^0.0^11.0^0.6363636363636364^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
String[] names = new String[3];^0.0^0.0^0.0^0.25^0.16129032258064516^0.03225806451612903^4.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
the valid elements are 0, 1, and 2, as in^0.0^0.0^0.0^0.0^0.0^0.0^7.0^0.7142857142857143^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
names[0] = "Sam"; names[1] = "Sue"; names[2] = "Mary";^0.0^0.0^0.0^0.0^0.16071428571428573^0.05357142857142857^6.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
you could access array elements in a for loop with:^0.0^0.0^0.0^0.1^0.0^0.0196078431372549^10.0^0.5^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
for (int i = 0; i < 3; i++) System.out.println(names[i]);^0.0^0.0^0.1^0.2^0.15789473684210525^0.05263157894736842^10.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
or, better programming practice would be to use the length property:^0.0^0.0^0.0^0.0^0.0^0.014705882352941176^11.0^0.45454545454545453^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
for (int i = 0; i < names.length; i++) System.out.println(names[i]);^0.0^0.0^0.08333333333333333^0.16666666666666666^0.1323529411764706^0.04411764705882353^12.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
The compiler does no checking to ensure that you stay within the bounds of the array^8.0^0.0^0.0^0.0^0.0^0.0^16.0^0.5625^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
but the JVM does check at runtime - if you try to exceed the bounds of the array, an exception will occur^12.0^0.0^0.047619047619047616^0.09523809523809523^0.0^0.0^21.0^0.47619047619047616^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Note that a zero-length array is valid:^0.0^0.0^0.0^0.0^0.0^0.02564102564102564^8.0^0.375^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Book[] titles = new Book[] { }; Book[] moreTitles = new Book[0];^0.0^0.0^0.125^0.25^0.18461538461538463^0.03076923076923077^8.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
you might create a zero-length array as the return value from a method typed as returning an array, when there are no items to return (as opposed to returning ^16.0^0.0^0.0^0.06666666666666667^0.005952380952380952^0.0^30.0^0.5333333333333333^text
null^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
)^0.0^0.0^0.0^0.0^1.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Code Sample: Java-Arrays/Demos/Arrays1.java^0.0^0.0^0.14285714285714285^0.0^0.0^0.06976744186046512^7.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
import java.util.*; public class Arrays1 { public static void main(String[] args) { Random r = new Random(); int[] nums = new int[10]; for (int i = 0; i < nums.length; i++) { nums[i] = r.nextInt(100); } System.out.println("Element 7 is: " + nums[7]); String[] names = new String[3]; names[0] = "Joe"; names[1] = "Jane"; names[2] = "Herkimer"; for (int i = 0; i < names.length; i++) { System.out.println(names[i]); } //this line should throw an exception System.out.println(names[6]); } } ^1.619047619047619^1.0^0.15942028985507245^0.2463768115942029^0.11623616236162361^0.02952029520295203^69.0^0.043478260869565216^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Array Variables^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
The array as a whole can be referenced by the array name without the brackets, for example, as a parameter to or return value from a function^8.0^0.0^0.0^0.07407407407407407^0.0^0.0^27.0^0.6296296296296297^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Code Sample: Java-Arrays/Demos/Arrays2.java^0.0^0.0^0.14285714285714285^0.0^0.0^0.06976744186046512^7.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
public class Arrays2 { public static void main(String[] args) { String[] names = new String[3]; names[0] = "Joe"; names[1] = "Jane"; names[2] = "Herkimer"; printArray(^1.5714285714285714^0.0^0.15^0.3^0.11413043478260869^0.021739130434782608^20.0^0.0^text
names^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
); } public static void printArray(^0.6666666666666666^0.0^0.25^0.75^0.10256410256410256^0.0^4.0^0.0^text
String[] data^0.0^0.0^0.0^0.0^0.15384615384615385^0.0^2.0^0.0^text
) { for (int i = 0; i < ^1.0^0.0^0.0^0.5^0.14814814814814814^0.07407407407407407^4.0^0.0^text
data.length;^0.0^0.0^0.0^0.0^0.08333333333333333^0.0^2.0^0.0^text
 i++) { System.out.println(^2.0^0.0^0.25^0.0^0.0967741935483871^0.03225806451612903^4.0^0.0^text
data[i].toUpperCase()^0.0^0.0^0.3333333333333333^0.0^0.19047619047619047^0.0^3.0^0.0^text
); } } }^0.75^0.0^0.0^0.0^0.35714285714285715^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Code Explanation^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
The array ^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.5^text
names^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 is passed to ^1.0^0.0^0.0^0.0^0.0^0.0^3.0^0.6666666666666666^text
printArray^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
, where it is received as ^0.0^0.0^0.0^0.0^0.0^0.0^5.0^0.8^text
data^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
.^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Note also the syntax to access a method directly for an array element: ^12.0^0.0^0.0^0.07692307692307693^0.0^0.013333333333333334^13.0^0.38461538461538464^text
data[i].toUpperCase()^0.0^0.0^0.3333333333333333^0.0^0.19047619047619047^0.0^3.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Since an array reference is a variable, it can be made to refer to a different array at some point in time^8.0^0.0^0.0^0.0^0.0^0.0^22.0^0.6363636363636364^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
String[] names = new String[3]; names[0] = "Joe"; names[1] = "Jane"; names[2] = "Herkimer"; printArray(names); names = new String[2]; names[0] = "Rudolf"; names[1] = "Ingrid"; printArray(names);^0.0^0.0^0.09523809523809523^0.09523809523809523^0.14215686274509803^0.03431372549019608^21.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Copying Arrays^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
You can use ^0.0^0.0^0.0^0.0^0.0^0.0^3.0^0.6666666666666666^text
System.arraycopy^0.0^0.0^0.5^0.0^0.0^0.0^2.0^0.0^text
 to copy an array into another^1.0^0.0^0.0^0.0^0.0^0.0^6.0^0.6666666666666666^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
you might do this to expand an array by creating a larger one and copying the contents of the smaller one into it (but any references to the original array will need to be changed to point to the new array) ^16.0^0.0^0.0^0.07317073170731707^0.009302325581395349^0.0^41.0^0.5853658536585366^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
the declaration is:^0.0^0.0^0.0^0.0^0.0^0.05263157894736842^3.0^0.6666666666666666^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
public static void arraycopy( Object src, int srcPos, Object dest, int destPos, int length)^1.5^0.0^0.35714285714285715^0.42857142857142855^0.021052631578947368^0.0^14.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Code Sample: Java-Arrays/Demos/CopyArray.java^0.0^0.0^0.14285714285714285^0.0^0.0^0.06666666666666667^7.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
// puts two copies of a small array into a larger one public class CopyArray { public static void main(String[] args) { int nums[] = { 1, 2, 3, 4, 5 }; int biggerNums[] = new int[10]; ^1.1666666666666667^1.0^0.15384615384615385^0.34615384615384615^0.08163265306122448^0.01020408163265306^26.0^0.23076923076923078^text
System.arraycopy(nums, 0, biggerNums, 0, nums.length); System.arraycopy(nums, 0, biggerNums, nums.length, nums.length); ^3.25^0.0^0.6428571428571429^0.0^0.043795620437956206^0.0^14.0^0.0^text
 for (int i = 0; i < biggerNums.length; i++) System.out.println(biggerNums[i]); } }^1.5^0.0^0.25^0.16666666666666666^0.12087912087912088^0.03296703296703297^12.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Code Explanation^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^16.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
The first ^0.0^0.0^0.0^0.0^0.0^0.0^2.0^1.0^text
arraycopy^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
 line copys from ^1.0^0.0^0.3333333333333333^0.0^0.0^0.0^3.0^0.3333333333333333^text
nums^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
 into the first half of ^1.0^0.0^0.0^0.0^0.0^0.0^5.0^0.8^text
biggerNums^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
. The number of items copied is determined by ^20.0^0.0^0.0^0.0^0.0^0.0^8.0^0.5^text
nums.length^0.0^0.0^0.5^0.0^0.0^0.0^2.0^0.0^text
 ^20.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
System.arraycopy(nums, 0, biggerNums, 0, nums.length);^0.0^0.0^0.6666666666666666^0.0^0.05555555555555555^0.0^6.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^16.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^16.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
The second ^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.5^text
arraycopy^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
 line again copys from ^1.0^0.0^0.25^0.0^0.0^0.0^4.0^0.5^text
nums^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
, but now into the second half of ^20.0^0.0^0.0^0.0^0.0^0.0^7.0^0.7142857142857143^text
biggerNums^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
. The starting location for the "paste" is ^20.0^0.0^0.0^0.14285714285714285^0.0^0.0^7.0^0.42857142857142855^text
nums.length^0.0^0.0^0.5^0.0^0.0^0.0^2.0^0.0^text
, since that is where we left off the first time. And the number of items copied is again determined by ^20.0^0.0^0.0^0.0^0.0^0.0^20.0^0.7^text
nums.length^0.0^0.0^0.5^0.0^0.0^0.0^2.0^0.0^text
 ^20.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
System.arraycopy(nums, 5, biggerNums, nums.length, nums.length);^3.0^0.0^0.625^0.0^0.04225352112676056^0.0^8.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^16.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Exercise: Using the args Array^0.0^0.0^0.2^0.0^0.0^0.03333333333333333^5.0^0.2^text
 ^5.333333333333333^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Duration: 5 to 10 minutes.^0.0^0.0^0.0^0.0^0.0^0.038461538461538464^3.0^0.3333333333333333^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Note that there has been an array declaration in all of our examples thus far; the array of strings passed to main: ^16.0^0.0^0.0^0.0^0.008264462809917356^0.008264462809917356^22.0^0.5909090909090909^text
args^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^16.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
these are the additional words on the command line^0.0^0.0^0.0^0.0^0.0^0.0^9.0^0.5555555555555556^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Copy ^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
Hello.java^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.0^text
 to ^1.0^0.0^0.0^0.0^0.0^0.0^1.0^1.0^text
HelloArgs.java^0.0^0.0^0.5^0.0^0.0^0.0^2.0^0.0^text
, and modify that to loop through ^16.0^0.0^0.0^0.0^0.0^0.0^6.0^0.6666666666666666^text
args^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
 to print each element (remember to rename the class in the declaration line) ^16.5^0.0^0.0^0.07692307692307693^0.024096385542168676^0.0^13.0^0.46153846153846156^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Then run the program with something like ^0.0^0.0^0.0^0.0^0.0^0.0^7.0^0.5714285714285714^text
java HelloArgs From Me^0.0^0.0^0.25^0.0^0.0^0.0^4.0^0.5^text
 and see what happens^16.5^0.0^0.0^0.0^0.0^0.0^4.0^0.75^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Where is the solution?^0.0^0.0^0.0^0.0^0.0^0.045454545454545456^4.0^0.75^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Exercise: Game-Arrays01: A Guessing Game with Random Messages^0.0^0.0^0.1111111111111111^0.0^0.0^0.03278688524590164^9.0^0.2222222222222222^text
 ^5.333333333333333^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Duration: 15 to 20 minutes.^0.0^0.0^0.0^0.0^0.0^0.037037037037037035^3.0^0.3333333333333333^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Modify your guessing game program to hold an array of several different ^0.0^0.0^0.0^0.0^0.0^0.0^12.0^0.4166666666666667^text
String^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 messages, all of which have some form of message for "Correct"^16.5^0.0^0.0^0.09090909090909091^0.0^0.0^11.0^0.5454545454545454^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Generate a random number in the range from 0 to the size of the array^0.0^0.0^0.0^0.0^0.0^0.0^14.0^0.5714285714285714^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Use this value to select one message to print when they guess correctly^0.0^0.0^0.0^0.07692307692307693^0.0^0.0^13.0^0.38461538461538464^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Continue this approach for "Too Low" and "Too High"^0.0^0.0^0.0^0.3333333333333333^0.0^0.0^9.0^0.3333333333333333^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Where is the solution?^0.0^0.0^0.0^0.0^0.0^0.045454545454545456^4.0^0.75^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Arrays of Objects^0.0^0.0^0.0^0.0^0.0^0.0^3.0^0.3333333333333333^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
If an array contains objects, those objects' properties and methods may be accessed^8.0^0.0^0.0^0.07692307692307693^0.0^0.0^13.0^0.38461538461538464^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
the notation uses the array variable name, the index in brackets, a dot, and the property or method^12.0^0.0^0.0^0.0^0.0^0.0^18.0^0.5^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Code Sample: Java-Arrays/Demos/Arrays2.java^0.0^0.0^0.14285714285714285^0.0^0.0^0.06976744186046512^7.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
public class Arrays2 { public static void main(String[] args) { String[] names = new String[3]; names[0] = "Joe"; names[1] = "Jane"; names[2] = "Herkimer"; printArray(^1.5714285714285714^0.0^0.15^0.3^0.11413043478260869^0.021739130434782608^20.0^0.0^text
names^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
); } public static void printArray(^0.6666666666666666^0.0^0.25^0.75^0.10256410256410256^0.0^4.0^0.0^text
String[] data^0.0^0.0^0.0^0.0^0.15384615384615385^0.0^2.0^0.0^text
) { for (int i = 0; i < ^1.0^0.0^0.0^0.5^0.14814814814814814^0.07407407407407407^4.0^0.0^text
data.length;^0.0^0.0^0.0^0.0^0.08333333333333333^0.0^2.0^0.0^text
 i++) { System.out.println(^2.0^0.0^0.25^0.0^0.0967741935483871^0.03225806451612903^4.0^0.0^text
data[i].toUpperCase()^0.0^0.0^0.3333333333333333^0.0^0.19047619047619047^0.0^3.0^0.0^text
); } } }^0.75^0.0^0.0^0.0^0.35714285714285715^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Exercise: Payroll-Arrays01: An Array of employees^0.0^0.0^0.14285714285714285^0.0^0.0^0.04081632653061224^7.0^0.2857142857142857^text
 ^5.333333333333333^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Duration: 20 to 30 minutes.^0.0^0.0^0.0^0.0^0.0^0.037037037037037035^3.0^0.3333333333333333^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Modify the payroll program to use an array of ^0.0^0.0^0.0^0.0^0.0^0.0^9.0^0.4444444444444444^text
Employee^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 objects with a size of 3 or more (later we will come up with a more flexible solution that allows for the number of employees to change dynamically)^19.666666666666668^0.0^0.0^0.037037037037037035^0.0125^0.0^27.0^0.5555555555555556^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Use a ^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.5^text
for^0.0^0.0^0.0^1.0^0.0^0.0^1.0^0.0^text
 loop to populate and display the data^1.0^0.0^0.0^0.0^0.0^0.0^7.0^0.42857142857142855^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
After the loop is complete, ask the user to enter a last name^0.0^0.0^0.0^0.0^0.0^0.0^13.0^0.6153846153846154^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Loop through the array to find the element with the matching last name and display it^16.0^0.0^0.0^0.0^0.0^0.0^16.0^0.6875^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Where is the solution?^0.0^0.0^0.0^0.0^0.0^0.045454545454545456^4.0^0.75^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Enhanced ^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
for^0.0^0.0^0.0^1.0^0.0^0.0^1.0^0.0^text
 Loops - the For-Each Loop ^1.0^0.0^0.0^0.2^0.0^0.0^5.0^0.4^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Java 5 introduced the ^0.0^0.0^0.0^0.0^0.0^0.0^3.0^0.3333333333333333^text
for-each^0.0^0.0^0.0^0.5^0.0^0.0^2.0^0.5^text
 loop, which loops through a collection of values without using an index. Instead, the loop variable repesents each individual value.^11.0^0.0^0.05^0.0^0.0^0.0^20.0^0.4^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
The syntax uses a loop variable and a collection of values, separated by a colon character (which can be read as the word "from").^8.0^0.0^0.0^0.0^0.015037593984962405^0.0^24.0^0.5416666666666666^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^5.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
the collection of values can be any array or an instance of one of the Java ^6.0^0.0^0.0^0.0^0.0^0.0^16.0^0.6875^text
Collections classes^13.0^0.0^0.0^0.0^0.0^0.0^2.0^0.0^text
 (to be discussed later)^1.0^0.0^0.0^0.0^0.08333333333333333^0.0^4.0^0.5^text
 ^5.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
note that the looping variable must be declared in the parentheses that create the loop - you cannot use a preexisting variable as the loop variable ^6.0^0.0^0.0^0.0^0.0^0.0^25.0^0.52^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
the looping variable will represent each item from the collection or array in turn ^2.0^0.0^0.0^0.0^0.0^0.0^14.0^0.5^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Syntax^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
for (^0.0^0.0^0.0^1.0^0.2^0.0^1.0^0.0^text
dataType loopVariable^0.0^0.0^1.0^0.0^0.0^0.0^2.0^0.0^text
 : ^1.0^0.0^0.0^0.0^0.0^0.3333333333333333^0.0^0.0^text
collectionOfSameType^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
) ^0.5^0.0^0.0^0.0^0.25^0.0^0.0^0.0^text
code using loopVariable;^0.0^0.0^0.3333333333333333^0.0^0.041666666666666664^0.0^3.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Multi-Dimensional Arrays^0.0^0.0^0.0^0.0^0.0^0.0^3.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Arrays may have more than one dimension, for such things as:^0.0^0.0^0.0^0.09090909090909091^0.0^0.016666666666666666^11.0^0.6363636363636364^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
a graphic image that is x pixels across and y pixels vertically^0.0^0.0^0.0^0.0^0.0^0.0^12.0^0.4166666666666667^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
weather information modeled in a 3-dimensional space, with measurements for these axes: North/South, East/West, and altitude^12.0^0.0^0.0^0.05555555555555555^0.0^0.0234375^18.0^0.2777777777777778^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Declare a multidimensional array as:^0.0^0.0^0.0^0.0^0.0^0.027777777777777776^5.0^0.4^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Syntax^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
datatype^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
[][] ... [] ^0.0^0.0^0.0^0.0^0.5^0.0^0.0^0.0^text
arrayName^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
;^0.0^0.0^0.0^0.0^1.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Arrays are objects, and, like other objects, declaring a variable does not instantiate the array - that must be done separately. To instantiate a multidimensional array:^10.666666666666666^0.0^0.0^0.0^0.0^0.005714285714285714^25.0^0.48^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Syntax^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
arrayName^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
 = new ^1.0^0.0^0.0^1.0^0.0^0.14285714285714285^1.0^0.0^text
datatype^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
[^0.0^0.0^0.0^0.0^1.0^0.0^0.0^0.0^text
size1^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
][^0.0^0.0^0.0^0.0^1.0^0.0^0.0^0.0^text
size2^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
] ... [^0.0^0.0^0.0^0.0^0.2857142857142857^0.0^0.0^0.0^text
sizeN^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
];^0.0^0.0^0.0^0.0^1.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
the most significant dimension is listed first; the least significant dimension listed last^12.0^0.0^0.0^0.0^0.010526315789473684^0.0^13.0^0.5384615384615384^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
int[][] picture = new int[480][640];^0.0^0.0^0.0^0.75^0.25^0.027777777777777776^4.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
could be used to declare an array to store an image that is 640 pixels across and 480 pixels down - in a graphic the image data is stored sequentially across each row; each row is a 640 pixel block; there are 480 of these blocks in our image^18.0^0.0^0.0^0.0^0.007905138339920948^0.0^44.0^0.5909090909090909^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
int[][][] picture = new int[3][480][640];^0.0^0.0^0.0^0.75^0.3170731707317073^0.024390243902439025^4.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
this might be used for an image where the data is stored in three layers, each of which is an entire 480 by 640 array. ^12.0^0.0^0.0^0.08695652173913043^0.0^0.0^23.0^0.6086956521739131^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Multidimensional Arrays in Memory^0.0^0.0^0.0^0.0^0.0^0.0^4.0^0.25^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Recall that a matched pair of brackets after a data type means an array of that type^8.0^0.0^0.0^0.0^0.0^0.0^17.0^0.47058823529411764^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
and an array is a type of data^0.0^0.0^0.0^0.0^0.0^0.0^8.0^0.625^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
so a two dimensional array written as this:^0.0^0.0^0.0^0.125^0.0^0.023255813953488372^8.0^0.5^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
int[][] nums;^0.0^0.0^0.5^0.5^0.38461538461538464^0.0^2.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
could be thought of as an array of integer arrays, as if it were written as (note that this is not legal syntax): ^9.0^0.0^0.0^0.08695652173913043^0.01680672268907563^0.008403361344537815^23.0^0.5652173913043478^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
(int[])[] nums;^0.0^0.0^0.5^0.5^0.4666666666666667^0.0^2.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
In Java, a two-dimensional array is actually a single array of array reference variables, each of which points to a single dimensional array^8.0^0.0^0.0^0.0^0.0^0.0^24.0^0.4583333333333333^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
To extend the example above:^0.0^0.0^0.0^0.0^0.0^0.03571428571428571^5.0^0.6^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
int[][] nums = new int[3][6];^0.0^0.0^0.25^0.75^0.3103448275862069^0.034482758620689655^4.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
this is an array of 3 elements, each of which is an array of 6 int elements^0.0^0.0^0.0^0.13333333333333333^0.0^0.0^15.0^0.6^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Note that it is possible to replace any of the one-dimensional elements with a different one, or that the second-dimension arrays each have a different length - the following line would replace one of the arrays with another of a different length^12.0^0.0^0.0^0.0^0.0^0.0^43.0^0.6046511627906976^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
nums[1] = new int[4];^0.0^0.0^0.3333333333333333^0.6666666666666666^0.23809523809523808^0.047619047619047616^3.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Example - Printing a Picture^0.0^0.0^0.0^0.0^0.0^0.0^4.0^0.25^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
This example uses a two-dimensional array preloaded with text characters that make up a picture^8.0^0.0^0.0625^0.0625^0.0^0.0^16.0^0.375^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
there is a loop that processes each row (the first, or most significant, dimension of the array, each element of which is an array of characters)^12.0^0.0^0.0^0.0^0.013422818791946308^0.0^26.0^0.6538461538461539^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
within that loop, another loop prints each character without ending the line^12.0^0.0^0.0^0.0^0.0^0.0^12.0^0.5^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
then, when the inner loop is done, a newline is printed^0.0^0.0^0.0^0.0^0.0^0.0^11.0^0.6363636363636364^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Code Sample: Java-Arrays/Demos/ArrayPicture.java^0.0^0.0^0.14285714285714285^0.0^0.0^0.0625^7.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
public class ArrayPicture { public static void main(String[] args) { char[][] imgData = new char[][] { { ' ',' ',' ',' ',' ',' ',' ' }, { ' ',' ',' ','0',' ',' ',' ' }, { ' ',' ',' ','|',' ',' ',' ' }, { ' ','0','-','+','-','0',' ' }, { ' ',' ',' ','|',' ',' ',' ' }, { ' ',' ',' ','0',' ',' ',' ' }, { ' ',' ',' ',' ',' ',' ',' ' } }; for (int row = 0; row < imgData.length ; row++ ) { for (int col = 0; col < imgData[row].length; col++ ) { System.out.print(imgData[row][col]); } System.out.println(); } } } ^3.727272727272727^0.0^0.1891891891891892^0.32432432432432434^0.09193548387096774^0.016129032258064516^37.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Because multi-dimensional arrays are implemented as arrays of array references, it is possible to partially instantiate an array:^8.0^0.0^0.0^0.0^0.0^0.007575757575757576^19.0^0.42105263157894735^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
int[][] nums = new int[3][];^0.0^0.0^0.25^0.75^0.32142857142857145^0.03571428571428571^4.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
This creates ^0.0^0.0^0.0^0.5^0.0^0.0^2.0^0.0^text
nums^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
 as a two-dimensional array (better viewed in this case as an array of array references), and creates an array holding three ^11.0^0.0^0.0^0.09090909090909091^0.015267175572519083^0.0^22.0^0.45454545454545453^text
null^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 references to integer arrays ^1.0^0.0^0.0^0.0^0.0^0.0^4.0^0.25^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^5.333333333333333^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Exercise: Payroll-Arrays02: An Array for Dependents (optional) ^0.0^0.0^0.125^0.125^0.031746031746031744^0.031746031746031744^8.0^0.125^text
 ^5.333333333333333^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Duration: 30 to 40 minutes.^0.0^0.0^0.0^0.0^0.0^0.037037037037037035^3.0^0.3333333333333333^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
We would like to keep track of our employees' dependents; the plan is to have the ^12.0^0.0^0.0^0.0^0.011627906976744186^0.0^16.0^0.6875^text
Employee^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 class contain an array of objects, each of which represents one dependent^12.5^0.0^0.0^0.08333333333333333^0.0^0.0^12.0^0.5^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
The class representing a dependent should contain a reference to the employee that it belongs to, in case we need to look up any employee-related information from a dependent reference^16.0^0.0^0.0^0.06451612903225806^0.0^0.0^31.0^0.5161290322580645^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Create a new class (in the ^0.0^0.0^0.0^0.3333333333333333^0.037037037037037035^0.0^6.0^0.5^text
employees^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 package) called ^1.0^0.0^0.0^0.5^0.058823529411764705^0.0^2.0^0.0^text
Dependent^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
, with ^16.0^0.0^0.0^0.0^0.0^0.0^1.0^1.0^text
String^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 properties for first and last names, and property called ^16.5^0.0^0.0^0.1111111111111111^0.0^0.0^9.0^0.4444444444444444^text
dependentOf^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
, whose type is ^0.0^0.0^0.0^0.0^0.0^0.0^3.0^0.6666666666666666^text
Employee^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
It should have a constructor that accepts values for all three properties - give the constructor package access instead of ^16.0^0.0^0.0^0.10526315789473684^0.0^0.0^19.0^0.5263157894736842^text
public^0.0^0.0^0.0^1.0^0.0^0.0^1.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
It should have set and get methods for the name properties, and only a get method for the employee they are a dependent of^16.0^0.0^0.0^0.08333333333333333^0.0^0.0^24.0^0.6666666666666666^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Add a property called ^0.0^0.0^0.0^0.0^0.0^0.0^4.0^0.25^text
dependents^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 to ^1.0^0.0^0.0^0.0^0.0^0.0^1.0^1.0^text
Employee^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 that is an array of ^16.5^0.0^0.0^0.0^0.0^0.0^5.0^0.8^text
Dependent^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 objects, and instantiate a five-element array ^19.0^0.0^0.0^0.0^0.0^0.0^7.0^0.42857142857142855^text
 ^13.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
while this isn't the best practice, there isn't a much better solution, since the fundamental problem is that an array isn't really a good idea for a set of items with no fixed size - a collection class would be better ^21.0^0.0^0.0^0.1^0.0^0.0^40.0^0.5^text
 ^16.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 it would, however, be an improvement to have a method like ^1.0^0.0^0.0^0.0^0.0^0.0^11.0^0.7272727272727273^text
createDependentArray(int size)^24.0^0.0^0.3333333333333333^0.3333333333333333^0.05405405405405406^0.0^3.0^0.0^text
 that could at least provide each employee with an individually sized array (which still couldn't be expanded) ^20.5^0.0^0.0^0.0^0.017094017094017096^0.0^17.0^0.6470588235294118^text
 ^16.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
feel free to implement this ehnancement if you have time ^0.0^0.0^0.1^0.2^0.0^0.0^10.0^0.3^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
It is generally considerered a risky practice to create get and set methods for an array property - it exposes too much of the inner workings of the class to outside code (since it would enable wholesale replacement of the array or of the array's contents). Instead, we can control the array through properties and methods in the ^25.6^0.0^0.017543859649122806^0.03508771929824561^0.005714285714285714^0.0^57.0^0.5263157894736842^text
Employee^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 class. To start, add an ^16.5^0.0^0.0^0.2^0.0^0.0^5.0^0.4^text
int numDependents^0.0^0.0^0.5^0.5^0.0^0.0^2.0^0.0^text
 property to ^1.0^0.0^0.0^0.0^0.0^0.0^2.0^0.5^text
Employee^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
.^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Create an ^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.5^text
addDependent(String firstName, String lastName) ^0.0^0.0^0.6^0.0^0.041666666666666664^0.0^5.0^0.0^text
 method that instantiates a dependent using the provided names and the ^16.5^0.0^0.09090909090909091^0.0^0.0^0.0^11.0^0.45454545454545453^text
this^0.0^0.0^0.0^1.0^0.0^0.0^1.0^0.0^text
 reference for the third parameter to the ^16.5^0.0^0.0^0.14285714285714285^0.0^0.0^7.0^0.5714285714285714^text
Dependent^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 constructor (the ^1.0^0.0^0.0^0.0^0.05555555555555555^0.0^2.0^0.5^text
Employee^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 reference)^1.0^0.0^0.0^0.0^0.09090909090909091^0.0^1.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
The ^0.0^0.0^0.0^0.0^0.0^0.0^1.0^1.0^text
addDependent^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
 method should then put the new dependent at the ^16.5^0.0^0.0^0.1111111111111111^0.0^0.0^9.0^0.6666666666666666^text
numDependents^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
 location in the array, and increment ^1.0^0.0^0.0^0.0^0.0^0.0^6.0^0.5^text
numDependents^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
, but only if ^16.0^0.0^0.0^0.3333333333333333^0.0^0.0^3.0^0.6666666666666666^text
numDependents^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
 is less than the length of the array ^16.5^0.0^0.0^0.0^0.0^0.0^8.0^0.75^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Add the method listed below to the ^0.0^0.0^0.0^0.0^0.0^0.0^7.0^0.5714285714285714^text
Employee^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 class (you can copy it from the solution): ^11.0^0.0^0.0^0.125^0.04^0.02^8.0^0.625^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
public String listDependents() { StringBuffer temp = new StringBuffer(); String newline = System.getProperty("line.separator"); if (newline == null) newline = "\n"; for (int i = 0; i < dependents.length; i++) { temp.append(dependents[i].getFirstName()); temp.append(" "); temp.append(dependents[i].getLastName()); temp.append(newline); } return temp.toString(); }^1.1666666666666667^0.0^0.16279069767441862^0.13953488372093023^0.10824742268041238^0.01804123711340206^43.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
In your data-populating loop, add a question about how many dependents^0.0^0.0^0.0^0.0^0.0^0.0^12.0^0.5^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Use a loop to get the names and add each dependent to the employee^0.0^0.0^0.0^0.0^0.0^0.0^14.0^0.5714285714285714^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
When you print out the ^0.0^0.0^0.0^0.0^0.0^0.0^5.0^0.6^text
Employee^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 information, also print out the result of calling ^16.5^0.0^0.0^0.0^0.0^0.0^8.0^0.375^text
listDependents^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Where is the solution?^0.0^0.0^0.0^0.0^0.0^0.045454545454545456^4.0^0.75^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^10.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Typecasting with Arrays of Primitives ^0.0^0.0^0.0^0.0^0.0^0.0^5.0^0.4^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
It is not possible to typecast an array of one type of primitive to an array of another type of primitive. For example, the following will cause compiler errors if the comment marks are removed:^10.666666666666666^0.0^0.0^0.05714285714285714^0.0^0.0050^35.0^0.4857142857142857^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Code Sample: Java-Arrays/Demos/ArrayTypecast.java^0.0^0.0^0.14285714285714285^0.0^0.0^0.061224489795918366^7.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
// typecasts with arrays public class ArrayTypecast { public static void main(String[] args) { int i = 5; double d; d = i; i = (int) d; int inums[] = { 1, 2, 3, 4, 5 }; double[] dnums; // line below fails //dnums = inums; dnums = new double[] { 1.1, 2.2, 3.3, 4.4 }; // line below fails //inums = (int[]) dnums; } } ^0.9230769230769231^5.0^0.23076923076923078^0.3333333333333333^0.08823529411764706^0.01871657754010695^39.0^0.07692307692307693^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Code Explanation^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^16.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Neither an implicit	or explicit typecast can be performed. With a single ^20.0^0.0^0.0^0.0^0.0^0.0^12.0^0.5833333333333334^text
int i^0.0^0.0^0.0^0.5^0.0^0.0^2.0^0.0^text
, the ^0.0^0.0^0.0^0.0^0.0^0.0^1.0^1.0^text
copy^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 of it that is given to ^20.5^0.0^0.0^0.0^0.0^0.0^6.0^0.8333333333333334^text
d^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 can be expanded to a ^20.5^0.0^0.0^0.0^0.0^0.0^5.0^0.8^text
double^0.0^0.0^0.0^1.0^0.0^0.0^1.0^0.0^text
. But, with the ^0.0^0.0^0.0^0.0^0.0^0.0^3.0^1.0^text
int[] inums^0.0^0.0^0.5^0.5^0.18181818181818182^0.0^2.0^0.0^text
, the value that would be given to ^20.0^0.0^0.0^0.0^0.0^0.0^7.0^0.7142857142857143^text
dnums^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
 is just a ^1.0^0.0^0.0^0.0^0.0^0.0^3.0^0.6666666666666666^text
copy of the reference^20.0^0.0^0.0^0.0^0.0^0.0^4.0^0.5^text
 to ^1.0^0.0^0.0^0.0^0.0^0.0^1.0^1.0^text
inums^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
, so there is no way that each of the individual elements can be expanded to ^26.666666666666668^0.0^0.0^0.0^0.0^0.0^15.0^0.7333333333333333^text
double^0.0^0.0^0.0^1.0^0.0^0.0^1.0^0.0^text
.^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^16.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
The next chapter will discuss typecasting from arrays of one type of object to another. ^20.0^0.0^0.0^0.0^0.0^0.0^15.0^0.6^text
 ^12.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Arrays Conclusion^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
In this lesson of the Java tutorial you have learned how to declare, instantiate and work with arrays of primitives and objects.^9.0^0.0^0.0^0.045454545454545456^0.0^0.0^22.0^0.5^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
To continue to learn Java go to the ^0.0^0.0^0.0^0.125^0.0^0.0^8.0^0.625^text
top of this page^0.0^0.0^0.0^0.25^0.0^0.0^4.0^0.5^text
 and click on the next lesson in this Java Tutorial's Table of Contents.^1.0^0.0^0.0^0.07692307692307693^0.0^0.0^13.0^0.46153846153846156^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Last updated on 2009-03-02^0.0^0.0^0.0^0.0^0.0^0.0^3.0^0.6666666666666666^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^6.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^8.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
All material in this Arrays is copyright 2009 Webucator. The purpose of this website is to help you learn Java on your own and use of the website implies your agreement to our ^12.0^0.0^0.09375^0.0625^0.0^0.0^32.0^0.53125^text
Java Tutorial Terms of Service^0.0^0.0^0.0^0.0^0.0^0.0^5.0^0.2^text
.^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^2.6666666666666665^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^1.6^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Use of ^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.5^text
http://www.learn-java-tutorial.com^0.0^0.0^0.3333333333333333^0.0^0.0^0.0^6.0^0.0^text
 (Website) implies agreement to the following:^1.0^0.0^0.16666666666666666^0.0^0.043478260869565216^0.021739130434782608^6.0^0.3333333333333333^text
 ^2.6666666666666665^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Copyright Information^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.0^text
 ^5.333333333333333^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
All pages and graphics on Website are the property of ^0.0^0.0^0.1^0.0^0.0^0.0^10.0^0.6^text
Webucator, Inc.^0.0^0.0^0.5^0.0^0.0^0.0^2.0^0.5^text
 unless otherwise specified.^1.0^0.0^0.0^0.0^0.0^0.0^3.0^0.3333333333333333^text
 ^5.333333333333333^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
None of the content on Website may be redistributed or reproduced in any way, shape, or form without written permission from ^4.0^0.0^0.047619047619047616^0.0^0.0^0.0^21.0^0.5714285714285714^text
Webucator, Inc.^0.0^0.0^0.5^0.0^0.0^0.0^2.0^0.5^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
No Printing or saving of pages or content on Website^0.0^0.0^0.1^0.0^0.0^0.0^10.0^0.5^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
This content may not be printed or saved. It is for online use only.^0.0^0.0^0.0^0.14285714285714285^0.0^0.0^14.0^0.5^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Linking to Website^0.0^0.0^0.3333333333333333^0.0^0.0^0.0^3.0^0.3333333333333333^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
You may link to any of the pages on Website; however, you may not include the content in a ^0.0^0.0^0.05263157894736842^0.0^0.01098901098901099^0.0^19.0^0.7368421052631579^text
frame^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 or ^1.0^0.0^0.0^0.0^0.0^0.0^1.0^1.0^text
iframe^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
 without written permission from ^1.0^0.0^0.0^0.0^0.0^0.0^4.0^0.5^text
Webucator, Inc.^0.0^0.0^0.5^0.0^0.0^0.0^2.0^0.5^text
 ^5.333333333333333^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Warranties^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Website is provided without warranty of any kind. There are no guarantees that use of the site will not be subject to interruptions. All direct or indirect risk related to use of the site is borne entirely by the user. All code and explanations provided on this site are provided without warranties to correctness, performance, fitness, merchantability, and/or any other warranty (whether expressed or implied).^6.666666666666667^0.0^0.015151515151515152^0.015151515151515152^0.004750593824228029^0.0023752969121140144^66.0^0.5151515151515151^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
For individual private use only^0.0^0.0^0.0^0.4^0.0^0.0^5.0^0.2^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
You agree not to use this online manual to deliver or receive training. If you are delivering or attending a class that is making use of this online manual, you are in violation of our terms of service. Please report any abuse to ^0.0^0.0^0.0^0.09302325581395349^0.0^0.0^43.0^0.4883720930232558^text
courseware@webucator.com^0.0^0.0^0.6666666666666666^0.0^0.0^0.0^3.0^0.0^text
. If you would like to deliver or receive training using this manual, please fill out the form at ^0.0^0.0^0.0^0.1111111111111111^0.0^0.0^18.0^0.4444444444444444^text
http://www.webucator.com/Contact.cfm^0.0^0.0^0.6666666666666666^0.0^0.0^0.027777777777777776^6.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
http://www.webucator.com/help/supportWiki/index.cfm/JVA102#Class_Files^0.0^0.0^0.7^0.0^0.0^0.05714285714285714^10.0^0.0^text
.^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 For more info on getting training, please email sales@webucator.com."; ^0.0^0.0^0.18181818181818182^0.09090909090909091^0.013513513513513514^0.0^11.0^0.2727272727272727^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text


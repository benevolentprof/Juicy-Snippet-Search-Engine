 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
QUICKSORT (Java, C++) » Algorithms and Data Structures^0.0^0.0^0.14285714285714285^0.0^0.037037037037037035^0.018518518518518517^7.0^0.14285714285714285^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.75^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^2.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^3.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Algorithms and Data Structures^0.0^0.0^0.0^0.0^0.0^0.0^4.0^0.25^text
 ^2.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^2.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^3.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
with implementations in Java and C++^0.0^0.0^0.0^0.0^0.0^0.027777777777777776^6.0^0.5^text
 ^2.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.6666666666666666^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^2.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^5.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Data structures^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.0^text
 ^3.3333333333333335^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Algorithms^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 ^3.3333333333333335^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
C++^0.0^0.0^0.0^0.0^0.0^0.3333333333333333^1.0^0.0^text
 ^3.3333333333333335^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Books^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 ^3.3333333333333335^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Forum^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 ^7.333333333333333^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Feedback^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 ^10.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.666666666666667^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^3.5^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
TOP3 Articles^0.0^0.0^0.5^0.0^0.0^0.0^2.0^0.0^text
 Quicksort^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
 Depth-first search^0.0^0.0^0.0^0.0^0.0^0.0^3.0^0.3333333333333333^text
 Binary search tree^0.0^0.0^0.0^0.0^0.0^0.0^3.0^0.0^text
 ^6.333333333333333^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.6666666666666666^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^2.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^2.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^2.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^2.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^2.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^3.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^3.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Quicksort^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Quicksort is a fast sorting algorithm, which is used not only for educational purposes, but widely applied in practice. On the average, it has O(n log n) complexity, making quicksort suitable for sorting big data volumes. The idea of the algorithm is quite simple and once you realize it, you can write quicksort as fast as ^0.0^0.0^0.05263157894736842^0.03508771929824561^0.006172839506172839^0.0^57.0^0.42105263157894735^text
bubble sort^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.0^text
.^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Algorithm^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 The divide-and-conquer strategy is used in quicksort. Below the recursion step is described: ^0.0^0.0^0.06666666666666667^0.0^0.0^0.010638297872340425^15.0^0.4666666666666667^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Choose a pivot value. ^0.0^0.0^0.0^0.0^0.0^0.0^4.0^0.25^text
We take the value of the middle element as pivot value, but it can be any value, which is in range of sorted values, even if it doesn't present in the array.^0.0^0.0^0.0^0.03125^0.0^0.0^32.0^0.59375^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Partition. ^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
Rearrange elements in such a way, that all elements which are lesser than the pivot go to the left part of the array and all elements greater than the pivot, go to the right part of the array. Values equal to the pivot can stay in any part of the array. Notice, that array may be divided in non-equal parts.^0.0^0.0^0.0^0.0^0.0^0.0^61.0^0.6065573770491803^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Sort both parts. ^0.0^0.0^0.0^0.0^0.0^0.0^3.0^0.3333333333333333^text
Apply quicksort algorithm recursively to the left and the right parts.^0.0^0.0^0.09090909090909091^0.0^0.0^0.0^11.0^0.36363636363636365^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Partition algorithm in detail^0.0^0.0^0.0^0.0^0.0^0.0^4.0^0.5^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
There are two indices ^0.0^0.0^0.0^0.0^0.0^0.0^4.0^0.75^text
i^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 and ^1.0^0.0^0.0^0.0^0.0^0.0^1.0^1.0^text
j^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 and at the very beginning of the ^1.0^0.0^0.0^0.0^0.0^0.0^7.0^0.8571428571428571^text
partition ^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 algorithm ^1.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
i^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 points to the first element in the array and ^1.0^0.0^0.0^0.0^0.0^0.0^9.0^0.6666666666666666^text
j^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 points to the last one. Then algorithm moves ^1.0^0.0^0.0^0.0^0.0^0.0^8.0^0.625^text
i^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 forward, until an element with value greater or equal to the pivot is found. Index ^1.0^0.0^0.0^0.0^0.0^0.0^15.0^0.5333333333333333^text
j^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 is moved backward, until an element with value lesser or equal to the pivot is found. If ^1.0^0.0^0.0^0.058823529411764705^0.0^0.0^17.0^0.5294117647058824^text
i ? j ^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.0^text
then they are swapped and i steps to the next position (^0.0^0.0^0.0^0.0^0.017857142857142856^0.0^11.0^0.6363636363636364^text
i + 1^0.0^0.0^0.0^0.0^0.0^0.2^1.0^0.0^text
), j steps to the previous one ^0.0^0.0^0.0^0.0^0.03225806451612903^0.0^6.0^0.5^text
(j - 1)^0.0^0.0^0.0^0.0^0.2857142857142857^0.0^1.0^0.0^text
. Algorithm stops, when^0.0^0.0^0.0^0.0^0.0^0.0^3.0^0.3333333333333333^text
 i^1.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 becomes greater than ^1.0^0.0^0.0^0.0^0.0^0.0^3.0^0.6666666666666666^text
j^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
.^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
After partition, all values before ^0.0^0.0^0.0^0.0^0.0^0.0^5.0^0.6^text
i-th^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.0^text
 element are less or equal than the pivot and all values after ^1.0^0.0^0.0^0.0^0.0^0.0^12.0^0.6666666666666666^text
j-th^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.0^text
 element are greater or equal to the pivot.^1.0^0.0^0.0^0.0^0.0^0.0^8.0^0.5^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Example. ^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
Sort {1, 12, 5, 26, 7, 14, 3, 7, 2} using quicksort. ^0.0^0.0^0.3333333333333333^0.0^0.03773584905660377^0.0^3.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 Notice, that we show here only the first recursion step, in order not to make example too long. But, in fact, {1, 2, 5, 7, 3} and {14, 7, 26, 12} are sorted then recursively. ^0.0^0.0^0.0^0.038461538461538464^0.022727272727272728^0.0^26.0^0.6153846153846154^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Why does it work?^0.0^0.0^0.0^0.0^0.0^0.058823529411764705^4.0^0.5^text
 On the partition step algorithm divides the array into two parts and every element ^0.0^0.0^0.0^0.0^0.0^0.0^14.0^0.5^text
a^0.0^0.0^0.0^0.0^0.0^0.0^1.0^1.0^text
 from the left part is less or equal than every element ^1.0^0.0^0.0^0.0^0.0^0.0^11.0^0.7272727272727273^text
b^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 from the right part. Also ^1.0^0.0^0.0^0.0^0.0^0.0^5.0^0.8^text
a^0.0^0.0^0.0^0.0^0.0^0.0^1.0^1.0^text
 and ^1.0^0.0^0.0^0.0^0.0^0.0^1.0^1.0^text
b^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 satisfy ^1.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
a ? pivot ? b^0.0^0.0^0.0^0.0^0.0^0.0^3.0^0.3333333333333333^text
 inequality. After completion of the recursion calls both of the parts become sorted and, taking into account arguments stated above,^1.0^0.0^0.0^0.0^0.0^0.0^20.0^0.5^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 the whole array is sorted.^1.0^0.0^0.0^0.0^0.0^0.0^5.0^0.6^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Complexity analysis^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
On the average quicksort has O(n log n) complexity, but strong proof of this fact is not trivial and not presented here. Still, you can find the proof in ^0.0^0.0^0.03333333333333333^0.03333333333333333^0.012738853503184714^0.0^30.0^0.5333333333333333^text
[1]^0.0^0.0^0.0^0.0^0.6666666666666666^0.0^0.0^0.0^text
. In worst case, quicksort runs O(n^0.0^0.0^0.14285714285714285^0.14285714285714285^0.02857142857142857^0.0^7.0^0.14285714285714285^text
2^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
) time, but on the most "practical" data it works just fine and outperforms other O(n log n) sorting algorithms.^0.0^0.0^0.0^0.0^0.02631578947368421^0.0^20.0^0.35^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Code snippets^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Partition algorithm is important per se, therefore it may be carried out as a separate function. The code for C++ contains solid function for quicksort, but Java code contains two separate functions for partition and sort, accordingly.^0.0^0.0^0.02702702702702703^0.08108108108108109^0.0^0.00425531914893617^37.0^0.32432432432432434^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Java^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
int^0.0^0.0^0.0^1.0^0.0^0.0^1.0^0.0^text
 partition(^1.0^0.0^0.0^0.0^0.09090909090909091^0.0^1.0^0.0^text
int^0.0^0.0^0.0^1.0^0.0^0.0^1.0^0.0^text
 arr[], ^1.0^0.0^1.0^0.0^0.25^0.0^1.0^0.0^text
int^0.0^0.0^0.0^1.0^0.0^0.0^1.0^0.0^text
 left, ^1.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
int^0.0^0.0^0.0^1.0^0.0^0.0^1.0^0.0^text
 right)^1.0^0.0^0.0^0.0^0.14285714285714285^0.0^1.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
{^0.0^0.0^0.0^0.0^1.0^0.0^0.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
      ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
int^0.0^0.0^0.0^1.0^0.0^0.0^1.0^0.0^text
 i = left, j = right;^1.0^0.0^0.0^0.0^0.045454545454545456^0.09090909090909091^4.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
      ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
int^0.0^0.0^0.0^1.0^0.0^0.0^1.0^0.0^text
 tmp;^1.0^0.0^1.0^0.0^0.2^0.0^1.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
      ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
int^0.0^0.0^0.0^1.0^0.0^0.0^1.0^0.0^text
 pivot = arr[(left + right) / 2];^1.0^0.0^0.25^0.0^0.14705882352941177^0.08823529411764706^4.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
      ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
      ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
while^0.0^0.0^0.0^1.0^0.0^0.0^1.0^0.0^text
 (i <= j) {^1.0^0.0^0.0^0.0^0.25^0.08333333333333333^2.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
            ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
while^0.0^0.0^0.0^1.0^0.0^0.0^1.0^0.0^text
 (arr[i] < pivot)^1.0^0.0^0.3333333333333333^0.0^0.2222222222222222^0.05555555555555555^3.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
                  i++;^0.0^0.0^0.0^0.0^0.045454545454545456^0.045454545454545456^1.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
            ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
while^0.0^0.0^0.0^1.0^0.0^0.0^1.0^0.0^text
 (arr[j] > pivot)^1.0^0.0^0.3333333333333333^0.0^0.2222222222222222^0.05555555555555555^3.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
                  j--;^0.0^0.0^0.0^0.0^0.045454545454545456^0.0^1.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
            ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
if^0.0^0.0^0.0^1.0^0.0^0.0^1.0^0.0^text
 (i <= j) {^1.0^0.0^0.0^0.0^0.2727272727272727^0.09090909090909091^2.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
                  tmp = arr[i];^0.0^0.0^0.6666666666666666^0.0^0.09375^0.03125^3.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
                  arr[i] = arr[j];^0.0^0.0^0.5^0.0^0.14285714285714285^0.02857142857142857^4.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
                  arr[j] = tmp;^0.0^0.0^0.6666666666666666^0.0^0.09375^0.03125^3.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
                  i++;^0.0^0.0^0.0^0.0^0.045454545454545456^0.045454545454545456^1.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
                  j--;^0.0^0.0^0.0^0.0^0.045454545454545456^0.0^1.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
            }^0.0^0.0^0.0^0.0^0.07692307692307693^0.0^0.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
      };^0.0^0.0^0.0^0.0^0.25^0.0^0.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
      ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
      ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
return^0.0^0.0^0.0^1.0^0.0^0.0^1.0^0.0^text
 i;^1.0^0.0^0.0^0.0^0.3333333333333333^0.0^1.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
}^0.0^0.0^0.0^0.0^1.0^0.0^0.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
void^0.0^0.0^0.0^1.0^0.0^0.0^1.0^0.0^text
 quickSort(^1.0^0.0^1.0^0.0^0.09090909090909091^0.0^1.0^0.0^text
int^0.0^0.0^0.0^1.0^0.0^0.0^1.0^0.0^text
 arr[], ^1.0^0.0^1.0^0.0^0.25^0.0^1.0^0.0^text
int^0.0^0.0^0.0^1.0^0.0^0.0^1.0^0.0^text
 left, ^1.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
int^0.0^0.0^0.0^1.0^0.0^0.0^1.0^0.0^text
 right) {^1.0^0.0^0.0^0.0^0.2222222222222222^0.0^1.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
      ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
int^0.0^0.0^0.0^1.0^0.0^0.0^1.0^0.0^text
 index = partition(arr, left, right);^1.0^0.0^0.2^0.0^0.07894736842105263^0.02631578947368421^5.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
      ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
if^0.0^0.0^0.0^1.0^0.0^0.0^1.0^0.0^text
 (left < index - 1)^1.0^0.0^0.0^0.0^0.1^0.05^2.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
            quickSort(arr, left, index - 1);^0.0^0.0^0.5^0.0^0.06666666666666667^0.0^4.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
      ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
if^0.0^0.0^0.0^1.0^0.0^0.0^1.0^0.0^text
 (index < right)^1.0^0.0^0.0^0.0^0.11764705882352941^0.058823529411764705^2.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
            quickSort(arr, index, right);^0.0^0.0^0.5^0.0^0.07142857142857142^0.0^4.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
}^0.0^0.0^0.0^0.0^1.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
C++^0.0^0.0^0.0^0.0^0.0^0.3333333333333333^1.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
void^0.0^0.0^0.0^1.0^0.0^0.0^1.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
quickSort^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
(^0.0^0.0^0.0^0.0^1.0^0.0^0.0^0.0^text
int^0.0^0.0^0.0^1.0^0.0^0.0^1.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
arr^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
[], ^0.0^0.0^0.0^0.0^0.5^0.0^0.0^0.0^text
int^0.0^0.0^0.0^1.0^0.0^0.0^1.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
left^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
, ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
int^0.0^0.0^0.0^1.0^0.0^0.0^1.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
right^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
) {^0.0^0.0^0.0^0.0^0.6666666666666666^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
      ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
int^0.0^0.0^0.0^1.0^0.0^0.0^1.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
i^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 = ^1.0^0.0^0.0^0.0^0.0^0.3333333333333333^0.0^0.0^text
left^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
, ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
j^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 = ^1.0^0.0^0.0^0.0^0.0^0.3333333333333333^0.0^0.0^text
right^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
;^0.0^0.0^0.0^0.0^1.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
      ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
int^0.0^0.0^0.0^1.0^0.0^0.0^1.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
tmp^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
;^0.0^0.0^0.0^0.0^1.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
      ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
int^0.0^0.0^0.0^1.0^0.0^0.0^1.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
pivot^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 = ^1.0^0.0^0.0^0.0^0.0^0.3333333333333333^0.0^0.0^text
arr^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
[(^0.0^0.0^0.0^0.0^1.0^0.0^0.0^0.0^text
left^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 + ^1.0^0.0^0.0^0.0^0.0^0.3333333333333333^0.0^0.0^text
right^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
) / 2];^0.0^0.0^0.0^0.0^0.42857142857142855^0.14285714285714285^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
      ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
/* partition */^0.0^1.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
      ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
while^0.0^0.0^0.0^1.0^0.0^0.0^1.0^0.0^text
 (^1.0^0.0^0.0^0.0^0.5^0.0^0.0^0.0^text
i^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 <= ^1.0^0.0^0.0^0.0^0.0^0.25^0.0^0.0^text
j^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
) {^0.0^0.0^0.0^0.0^0.6666666666666666^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
            ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
while^0.0^0.0^0.0^1.0^0.0^0.0^1.0^0.0^text
 (^1.0^0.0^0.0^0.0^0.5^0.0^0.0^0.0^text
arr^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
[^0.0^0.0^0.0^0.0^1.0^0.0^0.0^0.0^text
i^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
] < ^0.0^0.0^0.0^0.0^0.25^0.25^0.0^0.0^text
pivot^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
)^0.0^0.0^0.0^0.0^1.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
                  ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
i^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
++;^0.0^0.0^0.0^0.0^0.3333333333333333^0.3333333333333333^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
            ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
while^0.0^0.0^0.0^1.0^0.0^0.0^1.0^0.0^text
 (^1.0^0.0^0.0^0.0^0.5^0.0^0.0^0.0^text
arr^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
[^0.0^0.0^0.0^0.0^1.0^0.0^0.0^0.0^text
j^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
] > ^0.0^0.0^0.0^0.0^0.25^0.25^0.0^0.0^text
pivot^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
)^0.0^0.0^0.0^0.0^1.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
                  ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
j^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
--;^0.0^0.0^0.0^0.0^0.3333333333333333^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
            ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
if^0.0^0.0^0.0^1.0^0.0^0.0^1.0^0.0^text
 (^1.0^0.0^0.0^0.0^0.5^0.0^0.0^0.0^text
i^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 <= ^1.0^0.0^0.0^0.0^0.0^0.25^0.0^0.0^text
j^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
) {^0.0^0.0^0.0^0.0^0.6666666666666666^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
                  ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
tmp^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
 = ^1.0^0.0^0.0^0.0^0.0^0.3333333333333333^0.0^0.0^text
arr^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
[^0.0^0.0^0.0^0.0^1.0^0.0^0.0^0.0^text
i^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
];^0.0^0.0^0.0^0.0^1.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
                  ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
arr^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
[^0.0^0.0^0.0^0.0^1.0^0.0^0.0^0.0^text
i^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
] = ^0.0^0.0^0.0^0.0^0.25^0.25^0.0^0.0^text
arr^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
[^0.0^0.0^0.0^0.0^1.0^0.0^0.0^0.0^text
j^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
];^0.0^0.0^0.0^0.0^1.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
                  ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
arr^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
[^0.0^0.0^0.0^0.0^1.0^0.0^0.0^0.0^text
j^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
] = ^0.0^0.0^0.0^0.0^0.25^0.25^0.0^0.0^text
tmp^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
;^0.0^0.0^0.0^0.0^1.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
                  ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
i^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
++;^0.0^0.0^0.0^0.0^0.3333333333333333^0.3333333333333333^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
                  ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
j^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
--;^0.0^0.0^0.0^0.0^0.3333333333333333^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
            }^0.0^0.0^0.0^0.0^0.07692307692307693^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
      };^0.0^0.0^0.0^0.0^0.25^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
      ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
/* recursion */^0.0^1.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
      ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
if^0.0^0.0^0.0^1.0^0.0^0.0^1.0^0.0^text
 (^1.0^0.0^0.0^0.0^0.5^0.0^0.0^0.0^text
left^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 < ^1.0^0.0^0.0^0.0^0.0^0.3333333333333333^0.0^0.0^text
j^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
)^0.0^0.0^0.0^0.0^1.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
            ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
quickSort^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
(^0.0^0.0^0.0^0.0^1.0^0.0^0.0^0.0^text
arr^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
, ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
left^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
, ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
j^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
);^0.0^0.0^0.0^0.0^1.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
      ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
if^0.0^0.0^0.0^1.0^0.0^0.0^1.0^0.0^text
 (^1.0^0.0^0.0^0.0^0.5^0.0^0.0^0.0^text
i^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 < ^1.0^0.0^0.0^0.0^0.0^0.3333333333333333^0.0^0.0^text
right^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
)^0.0^0.0^0.0^0.0^1.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
            ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
quickSort^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
(^0.0^0.0^0.0^0.0^1.0^0.0^0.0^0.0^text
arr^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
, ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
i^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
, ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
right^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
);^0.0^0.0^0.0^0.0^1.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
}^0.0^0.0^0.0^0.0^1.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Recommended books^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Cormen, Leiserson, Rivest. ^0.0^0.0^1.0^0.0^0.0^0.0^3.0^0.0^text
Introduction to algorithms.^0.0^0.0^0.0^0.0^0.0^0.0^3.0^0.3333333333333333^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
(Theory)^0.0^0.0^0.0^0.0^0.25^0.0^1.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Aho, Ullman, Hopcroft. ^0.0^0.0^0.6666666666666666^0.0^0.0^0.0^3.0^0.0^text
Data Structures and Algorithms.^0.0^0.0^0.0^0.0^0.0^0.0^4.0^0.25^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
(Theory)^0.0^0.0^0.0^0.0^0.25^0.0^1.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Robert Lafore. ^0.0^0.0^0.5^0.0^0.0^0.0^2.0^0.0^text
Data Structures and Algorithms in Java.^0.0^0.0^0.0^0.0^0.0^0.0^6.0^0.3333333333333333^text
 (Practice)^1.0^0.0^0.0^0.0^0.18181818181818182^0.0^1.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Mark Allen Weiss. ^0.0^0.0^0.0^0.0^0.0^0.0^3.0^0.0^text
Data Structures and Problem Solving Using C++.^0.0^0.0^0.0^0.0^0.0^0.021739130434782608^7.0^0.14285714285714285^text
 (Practice)^1.0^0.0^0.0^0.0^0.18181818181818182^0.0^1.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Visualizers^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Quicksort Animation (with source code line by line visualization)^0.0^0.0^0.1111111111111111^0.0^0.03076923076923077^0.0^9.0^0.2222222222222222^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Quicksort in Java Applets Centre^0.0^0.0^0.4^0.0^0.0^0.0^5.0^0.2^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Animated Sorting Algorithms: Quicksort^0.0^0.0^0.25^0.0^0.0^0.02631578947368421^4.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Nine responses to "Quicksort tutorial"^0.0^0.0^0.2^0.0^0.0^0.0^5.0^0.4^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
satinder^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
 on ^1.0^0.0^0.0^0.0^0.0^0.0^1.0^1.0^text
April 20, 2009^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 said:^1.0^0.0^0.0^0.0^0.0^0.16666666666666666^1.0^0.0^text
 ^2.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
very good algo for quick sort.............. this helps the student so much^0.0^0.0^0.08333333333333333^0.16666666666666666^0.0^0.0^12.0^0.3333333333333333^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Lords_Of_waR^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
 on ^1.0^0.0^0.0^0.0^0.0^0.0^1.0^1.0^text
Mar 23, 2009^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 said:^1.0^0.0^0.0^0.0^0.0^0.16666666666666666^1.0^0.0^text
 ^2.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
thanks for the tip..it really helps..simple and brief!!^.^..do you have a example flowchart of it?^0.0^0.0^0.0^0.1111111111111111^0.0^0.02040816326530612^18.0^0.4444444444444444^text
 ^2.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^3.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
No, we haven't at the moment. Thought, flowcharts for algorithms is in our to-do-list.^0.0^0.0^0.0^0.125^0.0^0.0^16.0^0.5625^text
 ^3.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Samin^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
 on ^1.0^0.0^0.0^0.0^0.0^0.0^1.0^1.0^text
Mar 16, 2009^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 said:^1.0^0.0^0.0^0.0^0.0^0.16666666666666666^1.0^0.0^text
 ^3.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
thank you , your codes are really simple to be understood and used^0.0^0.0^0.0^0.0^0.0^0.0^12.0^0.5^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
ann^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 on ^1.0^0.0^0.0^0.0^0.0^0.0^1.0^1.0^text
Mar 5, 2009^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 said:^1.0^0.0^0.0^0.0^0.0^0.16666666666666666^1.0^0.0^text
 ^3.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
one of the best explanation of quick sort on net. great work. keep it coming!!!!^0.0^0.0^0.0^0.0^0.0^0.0^15.0^0.4666666666666667^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Dipto^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
 on ^1.0^0.0^0.0^0.0^0.0^0.0^1.0^1.0^text
Feb 27, 2009^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 said:^1.0^0.0^0.0^0.0^0.0^0.16666666666666666^1.0^0.0^text
 ^3.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Thanks for the great program.^0.0^0.0^0.0^0.2^0.0^0.0^5.0^0.2^text
 it is shorter and simpler than any other quicksort that i have come across. ^0.0^0.0^0.07142857142857142^0.0^0.0^0.0^14.0^0.6428571428571429^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Bubli Sagar^0.0^0.0^1.0^0.0^0.0^0.0^2.0^0.0^text
 on ^1.0^0.0^0.0^0.0^0.0^0.0^1.0^1.0^text
Feb 12, 2009^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 said:^1.0^0.0^0.0^0.0^0.0^0.16666666666666666^1.0^0.0^text
 ^3.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
it is really simple and much better than any of the examples i came across..^0.0^0.0^0.0^0.0^0.0^0.0^15.0^0.6^text
 ^0.6666666666666666^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Rand^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 on ^1.0^0.0^0.0^0.0^0.0^0.0^1.0^1.0^text
Jan 6, 2009^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 said:^1.0^0.0^0.0^0.0^0.0^0.16666666666666666^1.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Thank u i am really happy because the code is simple and can be understood^0.0^0.0^0.0^0.0^0.0^0.0^15.0^0.4666666666666667^text
 ^0.6666666666666666^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Jon Archer^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.0^text
 on ^1.0^0.0^0.0^0.0^0.0^0.0^1.0^1.0^text
Jan 3, 2009^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 said:^1.0^0.0^0.0^0.0^0.0^0.16666666666666666^1.0^0.0^text
 ^2.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Really showed exactly what I wanted to know. Now if you could also include something on tail-recursion elimination, it would indeed be very helpful.^0.0^0.0^0.0^0.04^0.0^0.0^25.0^0.52^text
 ^2.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^3.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
We are going to develop "Quick sort in-depth" article, which will examine advanced quick sort problems, such as choosing the pivot value, quick sort optimization on small data volumes, etc. ^0.0^0.0^0.0^0.0^0.0^0.0^31.0^0.3548387096774194^text
 ^3.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Hassan^0.0^0.0^1.0^0.0^0.0^0.0^1.0^0.0^text
 on ^1.0^0.0^0.0^0.0^0.0^0.0^1.0^1.0^text
Nov 12, 2008^0.0^0.0^0.0^0.0^0.0^0.0^1.0^0.0^text
 said:^1.0^0.0^0.0^0.0^0.0^0.16666666666666666^1.0^0.0^text
 ^2.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 Thx You :) ^1.0^0.0^0.5^0.0^0.07142857142857142^0.07142857142857142^2.0^0.5^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^11.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Partners Ads        ^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.0^text
Speak to the experts in ^0.0^0.0^0.0^0.0^0.0^0.0^5.0^0.6^text
debt management^0.0^0.0^0.0^0.0^0.0^0.0^2.0^0.0^text
 for a debt free life        ^1.0^0.0^0.0^0.2^0.0^0.0^5.0^0.2^text
framed canvas print^0.0^0.0^0.0^0.0^0.0^0.0^3.0^0.0^text
        ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^5.75^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^2.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^2.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^2.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^2.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^2.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Leave a reply^0.0^0.0^0.0^0.0^0.0^0.0^3.0^0.3333333333333333^text
 ^4.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^1.3333333333333333^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^2.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Your name (optional):^0.0^0.0^0.0^0.0^0.09523809523809523^0.047619047619047616^3.0^0.6666666666666666^text
 ^2.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^2.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Your e-mail (optional):^0.0^0.0^0.0^0.0^0.08695652173913043^0.043478260869565216^4.0^0.25^text
 ^2.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^2.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
Message: ^0.0^0.0^0.0^0.0^0.0^0.1111111111111111^1.0^0.0^text
 ^2.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^2.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^2.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^0.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^1.0^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text
 ^3.5^0.0^0.0^0.0^0.0^0.0^0.0^0.0^text

